#N canvas 339 281 770 361 12;
#X floatatom 195 199 5 0 0 0 - - - 0;
#X obj 162 229 route text binary;
#X floatatom 227 169 5 0 0 0 - - - 0;
#X text 291 229 <- MESSAGE TYPE;
#X text 235 197 <- NUMBER OF CONNECTED WEBSOCKETS;
#X text 267 167 <- RECEIVING SOCKET NUMBER;
#N canvas 159 62 1378 625 websocket-server 0;
#X obj 1139 197 r websockets-list;
#X obj 1025 21 inlet;
#X obj 276 22 inlet;
#X obj 1007 574 outlet;
#X obj 314 576 outlet;
#X obj 655 269 i;
#X obj 637 293 <;
#X obj 637 242 t f b;
#X obj 637 319 select 1;
#X obj 637 21 inlet;
#N canvas 88 50 508 668 remove_socket 0;
#X obj 120 208 i;
#X obj 37 185 list;
#X obj 37 208 list split 1;
#X obj 136 426 list prepend;
#X obj 136 401 i;
#X obj 37 233 t f f;
#X obj 37 256 ==;
#X obj 37 320 list;
#X obj 37 343 route bang;
#X obj 136 451 t l l;
#X obj 70 482 list;
#X obj 37 282 select 0 1;
#X obj 104 373 t l b;
#X obj 102 565 s websockets-list;
#X obj 70 620 outlet;
#X obj 70 539 t b l;
#X obj 37 22 inlet;
#X obj 138 22 inlet;
#X obj 37 73 route bang;
#X obj 70 512 list append;
#X obj 241 426 s remove_socket_from_send_buffer;
#X obj 37 134 t b b;
#X obj 37 105 t b b;
#X obj 241 386 i;
#X obj 62 162 r websockets-list;
#X text 161 69 if disconnected client is a websocket \; - remove it from websockets list \; - remove its remaining messages from buffer;
#X text 240 448 see 'pd send-buffer' in main object;
#X connect 0 0 6 1;
#X connect 0 0 23 1;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 2 1 7 1;
#X connect 2 1 19 1;
#X connect 3 0 9 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 5 1 4 1;
#X connect 6 0 11 0;
#X connect 7 0 8 0;
#X connect 8 1 12 0;
#X connect 9 0 3 1;
#X connect 9 1 10 1;
#X connect 10 0 19 0;
#X connect 11 0 7 0;
#X connect 11 1 10 0;
#X connect 11 1 23 0;
#X connect 12 0 2 0;
#X connect 12 1 4 0;
#X connect 15 0 14 0;
#X connect 15 1 13 0;
#X connect 16 0 18 0;
#X connect 17 0 0 1;
#X connect 18 0 22 0;
#X connect 19 0 15 0;
#X connect 21 0 1 0;
#X connect 21 1 0 0;
#X connect 21 1 3 1;
#X connect 21 1 10 1;
#X connect 22 0 21 0;
#X connect 23 0 20 0;
#X connect 24 0 1 1;
#X restore 637 343 pd remove_socket;
#X obj 637 575 outlet;
#X obj 341 249 i;
#N canvas 112 66 403 331 add_socket 0;
#X obj 36 134 list;
#X obj 36 159 list append;
#X obj 68 212 s websockets-list;
#X obj 36 20 inlet;
#X obj 36 183 t b l;
#X obj 36 282 outlet;
#X obj 36 244 i;
#X obj 61 105 r websockets-list;
#X obj 36 62 t b f;
#X text 109 18 add socket to websockets list \; (just after sending handshake response);
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 3 0 8 0;
#X connect 4 0 6 0;
#X connect 4 1 2 0;
#X connect 6 0 5 0;
#X connect 7 0 0 1;
#X connect 8 0 0 0;
#X connect 8 1 1 1;
#X connect 8 1 6 1;
#X restore 341 286 pd add_socket;
#X obj 1007 425 i;
#X obj 637 368 t b b;
#X obj 28 576 outlet;
#N canvas 81 50 985 749 websocket-data 0;
#X obj 146 17 inlet;
#X obj 882 19 inlet;
#X obj 24 704 outlet;
#X obj 24 591 i;
#X msg 24 617 list disconnectsocket \$1;
#X obj 863 703 outlet;
#X obj 863 427 i;
#X obj 477 703 outlet;
#X text 262 702 output unmasked messages;
#X text 910 703 socket;
#X obj 24 564 t b;
#N canvas 132 63 832 789 unmask-message 0;
#X obj 177 111 i;
#X obj 219 111 + 1;
#X obj 170 287 * 256;
#X obj 152 311 +;
#X obj 106 286 t f b;
#X obj 417 533 mod 4;
#X obj 417 581 route 0 1 2 3;
#X obj 417 557 pack f f;
#X obj 417 630 expr $i1^$i2;
#X obj 509 630 expr $i1^$i2;
#X obj 601 630 expr $i1^$i2;
#X obj 692 630 expr $i1^$i2;
#X obj 328 460 ==;
#X obj 152 416 route 0;
#X obj 152 443 t b b;
#X obj 417 484 unpack f f;
#X obj 328 414 t f a;
#X obj 328 484 select 1;
#X obj 195 79 0;
#X obj 417 742 outlet;
#X obj 93 18 inlet;
#X obj 106 385 - 128;
#X obj 93 79 t b f;
#X obj 72 177 pack f f;
#X obj 222 79 10;
#X obj 328 437 - 13;
#X obj 276 79 8;
#X obj 152 385 +;
#X obj 180 363 0;
#X obj 170 339 expr ($i2 << 24) + ($i1 << 16);
#X obj 72 214 route 0 1 2 3 4 5 6 7 8 9 10 11 12 13;
#X obj 18 260 route 254 255;
#X obj 417 508 - 14;
#X text 416 213 0: message type \; 1: mask present (128) + data length(<126) \; [or extended length : 254=16bit or 255=64bit] \; 2-5: 32 higher bits of 64bit length (unsupported) \; 6-7: bits 16 to 32 of 64bit length \; 8-9: 16bit length (or 16 lower bits of 64bit length) \; 10-13: 32bit mask \; 14 and more: data;
#X obj 328 512 t b b;
#X obj 249 79 - 4;
#X obj 26 151 moses 0;
#X obj 72 741 outlet;
#X connect 0 0 1 0;
#X connect 0 0 36 0;
#X connect 1 0 0 1;
#X connect 2 0 3 1;
#X connect 3 0 27 0;
#X connect 4 0 21 0;
#X connect 4 1 24 0;
#X connect 5 0 7 0;
#X connect 6 0 8 0;
#X connect 6 1 9 0;
#X connect 6 2 10 0;
#X connect 6 3 11 0;
#X connect 7 0 6 0;
#X connect 8 0 19 0;
#X connect 9 0 19 0;
#X connect 10 0 19 0;
#X connect 11 0 19 0;
#X connect 12 0 17 0;
#X connect 13 0 14 0;
#X connect 13 1 12 1;
#X connect 14 0 37 0;
#X connect 14 1 35 0;
#X connect 15 0 32 0;
#X connect 15 1 7 1;
#X connect 16 0 25 0;
#X connect 16 1 15 0;
#X connect 17 0 34 0;
#X connect 18 0 0 1;
#X connect 20 0 22 0;
#X connect 21 0 13 0;
#X connect 22 0 0 0;
#X connect 22 1 23 1;
#X connect 23 0 30 0;
#X connect 24 0 0 1;
#X connect 25 0 12 0;
#X connect 26 0 0 1;
#X connect 27 0 13 0;
#X connect 28 0 27 1;
#X connect 29 0 27 1;
#X connect 30 0 37 0;
#X connect 30 1 31 0;
#X connect 30 6 29 1;
#X connect 30 7 29 0;
#X connect 30 8 2 0;
#X connect 30 9 3 0;
#X connect 30 10 8 1;
#X connect 30 11 9 1;
#X connect 30 12 10 1;
#X connect 30 13 11 1;
#X connect 30 14 16 0;
#X connect 31 0 26 0;
#X connect 31 0 28 0;
#X connect 31 2 4 0;
#X connect 32 0 5 0;
#X connect 34 0 18 0;
#X connect 34 1 37 0;
#X connect 35 0 0 1;
#X connect 36 1 23 0;
#X restore 146 71 pd unmask-message;
#X text 72 703 to 'send-buffer';
#X obj 146 179 route bang;
#X obj 342 144 0;
#X obj 315 144 1;
#X obj 468 145 0;
#X obj 441 145 1;
#X obj 315 117 t b b;
#X obj 409 117 t b b;
#X obj 262 179 spigot 1;
#X obj 388 179 spigot 0;
#X obj 213 243 route 129 130;
#X obj 301 267 t f b;
#X obj 301 292 route 136 137 138;
#X obj 213 703 outlet;
#X obj 213 205 t f b;
#X msg 213 294 text;
#X msg 257 318 binary;
#X obj 388 218 route bang;
#X obj 455 243 list prepend;
#X obj 262 117 t f;
#X obj 455 267 t l l;
#X obj 429 292 list;
#X obj 466 218 t b;
#X obj 429 400 list prepend;
#X msg 339 318 ping;
#X msg 378 343 pong;
#X msg 301 343 close;
#X obj 146 205 t b b;
#X obj 429 423 list trim;
#X text 275 71 <-- PROCESS MESSAGES AND MASK;
#X obj 213 444 t a;
#X obj 673 525 i;
#X obj 673 502 t b;
#X obj 590 634 print websocket-server;
#X msg 673 548 <PONG> received from socket \$1;
#X obj 429 446 route close ping pong;
#X obj 558 533 i;
#X msg 590 606 <PING> received from socket \$1;
#X obj 477 500 t a b;
#X obj 477 606 list prepend;
#X msg 558 581 send \$1 pong;
#X obj 558 557 t f f;
#X obj 881 373 t f;
#X text 524 702 pong response (with ping content);
#X text 151 314 websocket \; message types;
#X text 479 174 dispatch messages bytestream : \; - straight to outlet for text/binary \; - concat to list for websocket server messages;
#X connect 0 0 11 0;
#X connect 1 0 54 0;
#X connect 3 0 4 0;
#X connect 4 0 2 0;
#X connect 6 0 5 0;
#X connect 10 0 3 0;
#X connect 11 0 13 0;
#X connect 11 1 31 0;
#X connect 13 0 39 0;
#X connect 13 1 26 0;
#X connect 14 0 20 1;
#X connect 15 0 20 1;
#X connect 16 0 21 1;
#X connect 17 0 21 1;
#X connect 18 0 15 0;
#X connect 18 1 16 0;
#X connect 19 0 14 0;
#X connect 19 1 17 0;
#X connect 20 0 42 0;
#X connect 21 0 29 0;
#X connect 22 0 27 0;
#X connect 22 1 28 0;
#X connect 22 2 23 0;
#X connect 23 0 24 0;
#X connect 23 1 19 0;
#X connect 23 1 34 0;
#X connect 23 1 35 1;
#X connect 24 0 38 0;
#X connect 24 1 36 0;
#X connect 24 2 37 0;
#X connect 26 0 22 0;
#X connect 26 1 18 0;
#X connect 26 1 6 0;
#X connect 27 0 42 0;
#X connect 28 0 42 0;
#X connect 29 0 33 0;
#X connect 29 1 30 0;
#X connect 30 0 32 0;
#X connect 31 0 20 0;
#X connect 31 0 21 0;
#X connect 32 0 33 1;
#X connect 32 1 30 1;
#X connect 33 0 35 0;
#X connect 34 0 30 1;
#X connect 34 0 33 1;
#X connect 35 0 40 0;
#X connect 36 0 35 1;
#X connect 37 0 35 1;
#X connect 38 0 35 1;
#X connect 39 1 20 0;
#X connect 39 1 21 0;
#X connect 40 0 47 0;
#X connect 42 0 25 0;
#X connect 43 0 46 0;
#X connect 44 0 43 0;
#X connect 46 0 45 0;
#X connect 47 0 10 0;
#X connect 47 1 50 0;
#X connect 47 2 44 0;
#X connect 48 0 53 0;
#X connect 49 0 45 0;
#X connect 50 0 51 0;
#X connect 50 1 48 0;
#X connect 51 0 7 0;
#X connect 52 0 51 1;
#X connect 53 0 52 0;
#X connect 53 1 49 0;
#X connect 54 0 43 1;
#X connect 54 0 3 1;
#X connect 54 0 48 1;
#X connect 54 0 6 1;
#X restore 276 418 pd websocket-data;
#X obj 341 212 t b l;
#X obj 28 22 inlet;
#X obj 1206 572 outlet;
#X text 478 179 WEBSOCKET HANDSHAKE \; <-- & WEB SERVER;
#X text 408 412 <-- PROCESS \; INCOMING MESSAGES;
#X text 153 186 <-- PROCESS \; OUTGOING MESSAGES;
#X text 360 575 <- output decoded messages;
#X obj 1139 237 route bang;
#X obj 28 92 list trim;
#X obj 28 131 route broadcast send webpage;
#X text 70 20 websocket messages to send \; (and optional webpage);
#X obj 637 467 i;
#X obj 655 433 list length;
#X obj 655 407 r websockets-list;
#X obj 1044 51 inlet;
#N canvas 90 50 803 610 send-buffer 0;
#X obj 32 18 inlet;
#X obj 295 569 outlet;
#X obj 562 123 r tosendbuffer;
#X obj 32 150 t l b b;
#X obj 55 199 list;
#X obj 32 100 list length;
#X obj 32 125 list append;
#X obj 32 227 list prepend;
#X obj 32 252 s tosendbuffer;
#X obj 228 313 list;
#X obj 228 339 route bang;
#X obj 295 372 list split 1;
#X obj 295 454 list split;
#X obj 295 427 list;
#X obj 295 402 t b f;
#X obj 328 482 s tosendbuffer;
#X obj 228 263 t b b;
#X obj 295 512 list trim;
#X obj 562 195 value bufferlength;
#X obj 562 156 list length;
#X obj 32 76 t l l;
#N canvas 397 50 440 761 remove_socket_from_send_buffer 0;
#X obj 47 142 list;
#X obj 47 169 route bang;
#X obj 137 219 list split 1;
#X obj 137 300 list split;
#X obj 137 274 list;
#X obj 137 249 t b f f;
#X obj 137 455 list;
#X obj 137 326 t l l;
#X obj 169 504 list;
#X obj 137 352 list split 2;
#X msg 137 376 \$2;
#X obj 137 404 ==;
#X obj 47 69 t b b f;
#X obj 169 585 t l l;
#X obj 169 558 list prepend;
#X obj 114 611 list;
#X obj 137 430 t b f;
#X obj 169 530 list prepend;
#X obj 114 194 t b l b;
#X obj 169 478 select 0;
#X obj 114 676 s tosendbuffer;
#X obj 72 118 r tosendbuffer;
#X obj 47 28 inlet;
#X connect 0 0 1 0;
#X connect 1 1 18 0;
#X connect 2 0 5 0;
#X connect 2 1 4 1;
#X connect 3 0 7 0;
#X connect 3 1 6 1;
#X connect 4 0 3 0;
#X connect 5 0 4 0;
#X connect 5 1 3 1;
#X connect 5 2 17 1;
#X connect 6 0 2 0;
#X connect 7 0 9 0;
#X connect 7 1 8 1;
#X connect 8 0 17 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 16 0;
#X connect 12 0 0 0;
#X connect 12 2 11 1;
#X connect 13 0 15 1;
#X connect 13 1 14 1;
#X connect 14 0 13 0;
#X connect 15 0 20 0;
#X connect 16 0 6 0;
#X connect 16 1 19 0;
#X connect 17 0 14 0;
#X connect 18 0 15 0;
#X connect 18 1 2 0;
#X connect 18 2 14 1;
#X connect 19 0 8 0;
#X connect 21 0 0 1;
#X connect 22 0 12 0;
#X restore 425 338 pd remove_socket_from_send_buffer;
#X obj 227 48 loadbang;
#X obj 80 175 r tosendbuffer;
#X obj 253 289 r tosendbuffer;
#X obj 425 294 r remove_socket_from_send_buffer;
#X text 80 76 add to buffer;
#X text 434 315 remove remaining messages from disconnected client;
#X obj 228 237 metro 10;
#X obj 281 111 select 0 1;
#X obj 281 144 10;
#X obj 309 144 1;
#X obj 364 111 abs;
#X obj 364 135 int;
#X obj 281 188 i;
#X obj 363 157 t b f;
#X obj 281 212 +;
#X obj 281 82 r iemnet;
#X obj 364 82 r add_sending_delay;
#X text 286 237 <- OUTGOING MESSAGES;
#X text 127 131 default values for \; mrpeach and iemnet ->;
#X text 629 34 FIFO SEND BUFFER;
#X connect 0 0 20 0;
#X connect 2 0 19 0;
#X connect 3 0 7 0;
#X connect 3 1 4 0;
#X connect 4 0 7 1;
#X connect 5 0 6 0;
#X connect 6 0 3 0;
#X connect 7 0 8 0;
#X connect 9 0 10 0;
#X connect 10 1 11 0;
#X connect 11 0 14 0;
#X connect 11 1 13 1;
#X connect 12 0 17 0;
#X connect 12 1 15 0;
#X connect 13 0 12 0;
#X connect 14 0 13 0;
#X connect 14 1 12 1;
#X connect 16 0 9 0;
#X connect 17 0 1 0;
#X connect 19 0 18 0;
#X connect 20 0 5 0;
#X connect 20 1 6 1;
#X connect 22 0 28 0;
#X connect 23 0 4 1;
#X connect 24 0 9 1;
#X connect 25 0 21 0;
#X connect 28 0 16 0;
#X connect 29 0 30 0;
#X connect 29 1 31 0;
#X connect 30 0 34 0;
#X connect 31 0 34 0;
#X connect 32 0 33 0;
#X connect 33 0 35 0;
#X connect 34 0 36 0;
#X connect 35 0 34 0;
#X connect 35 1 36 1;
#X connect 36 0 28 1;
#X connect 37 0 29 0;
#X connect 38 0 32 0;
#X restore 28 500 pd send-buffer;
#X text 133 501 <-- 'SEND' BUFFER;
#N canvas 107 50 1024 942 websocket-http 0;
#N canvas 133 64 604 593 websocketresponsekey 0;
#N canvas 180 50 915 973 sha1-processchunk 0;
#X obj 590 489 unpack f f f f;
#N canvas 603 716 387 175 sha1-add 0;
#X obj 21 86 expr (($i1+$i3) + (($i2+$i4) / 65536)) % 65536 \; ($i2 + $i4) % 65536;
#X obj 300 48 inlet;
#X obj 21 48 inlet;
#X obj 114 48 inlet;
#X obj 207 48 inlet;
#X obj 21 137 outlet;
#X obj 300 136 outlet;
#X text 93 10 pseudo 32 bits add function;
#X connect 0 0 5 0;
#X connect 0 1 6 0;
#X connect 1 0 0 3;
#X connect 2 0 0 0;
#X connect 3 0 0 1;
#X connect 4 0 0 2;
#X restore 644 522 pd sha1-add;
#X text 190 447 a left-rotate 5;
#X obj 42 464 expr ((registers[0] << 5) % 65536) ^ (registers[1] >> 11) \; ((registers[1] << 5) % 65536) ^ (registers[0] >> 11);
#X obj 457 463 expr registers[8] \; registers[9 ];
#X obj 569 400 t b b f f;
#N canvas 608 713 387 175 sha1-add 0;
#X obj 21 56 expr (($i1+$i3) + (($i2+$i4) / 65536)) % 65536 \; ($i2 + $i4) % 65536;
#X obj 300 18 inlet;
#X obj 21 18 inlet;
#X obj 114 18 inlet;
#X obj 207 18 inlet;
#X obj 21 107 outlet;
#X obj 300 106 outlet;
#X connect 0 0 5 0;
#X connect 0 1 6 0;
#X connect 1 0 0 3;
#X connect 2 0 0 0;
#X connect 3 0 0 1;
#X connect 4 0 0 2;
#X restore 590 549 pd sha1-add;
#N canvas 603 699 393 175 sha1-add 0;
#X obj 21 56 expr (($i1+$i3) + (($i2+$i4) / 65536)) % 65536 \; ($i2 + $i4) % 65536;
#X obj 300 18 inlet;
#X obj 21 18 inlet;
#X obj 114 18 inlet;
#X obj 207 18 inlet;
#X obj 21 107 outlet;
#X obj 300 106 outlet;
#X connect 0 0 5 0;
#X connect 0 1 6 0;
#X connect 1 0 0 3;
#X connect 2 0 0 0;
#X connect 3 0 0 1;
#X connect 4 0 0 2;
#X restore 42 655 pd sha1-add;
#N canvas 605 700 390 175 sha1-add 0;
#X obj 21 56 expr (($i1+$i3) + (($i2+$i4) / 65536)) % 65536 \; ($i2 + $i4) % 65536;
#X obj 300 18 inlet;
#X obj 21 18 inlet;
#X obj 114 18 inlet;
#X obj 207 18 inlet;
#X obj 21 107 outlet;
#X obj 300 106 outlet;
#X connect 0 0 5 0;
#X connect 0 1 6 0;
#X connect 1 0 0 3;
#X connect 2 0 0 0;
#X connect 3 0 0 1;
#X connect 4 0 0 2;
#X restore 457 594 pd sha1-add;
#X obj 42 886 pack f f f f f f f f f f;
#X msg 42 915 \; registers 0 \$1 \$2 \$3 \$4 \$5 \$6 \$7 \$8 \$9 \$10;
#X obj 42 689 t f b;
#X obj 78 712 expr registers[0] \; registers[1] \; ((registers[2] >> 2)) ^ ((registers[3] << 14) % 65536) \; ((registers[3] >> 2)) ^ ((registers[2] << 14) % 65536) \; registers[4] \; registers[5] \; registers[6] \; registers[7];
#N canvas 76 50 1359 582 sha1-computefk 0;
#X obj 29 72 moses 20;
#X obj 381 132 moses 40;
#X obj 696 197 moses 60;
#X obj 29 273 expr (registers[2] & registers[4]) ^ ( (~registers[2]) & registers[6]) \; (registers[3] & registers[5]) ^ ( (~registers[3]) & registers[7]);
#X obj 381 342 pack;
#X obj 381 273 expr registers[2] ^ registers[4] ^ registers[6] \; registers[3] ^ registers[5] ^ registers[7];
#X obj 696 340 pack;
#X obj 696 273 expr (registers[2] & registers[4]) ^ (registers[2] & registers[6]) ^ (registers[4] & registers[6]) \; (registers[3] & registers[5]) ^ (registers[3] & registers[7]) ^ (registers[5] & registers[7]);
#X obj 29 342 pack;
#X msg 29 376 \$1 \$2 23170 31129;
#X obj 1036 340 pack;
#X obj 1036 273 expr registers[2] ^ registers[4] ^ registers[6] \; registers[3] ^ registers[5] ^ registers[7];
#X msg 381 375 \$1 \$2 28377 60321;
#X msg 696 373 \$1 \$2 36635 48348;
#X msg 1036 373 \$1 \$2 51810 49622;
#X obj 29 21 inlet;
#X text 79 20 counter value;
#X text 44 246 0 <= i <= 19 -> (b and c) xor ((not b) and d);
#X text 394 248 20 <= i <= 39 -> b xor c xor d;
#X text 1046 248 60 <= i <= 79 -> b xor c xor d;
#X text 707 249 40 <= i <= 59 (b and c) xor (b and d) xor (c and d);
#X text 151 375 k = 0x5A827999;
#X text 505 374 k = 0x6ED9EBA1;
#X text 819 372 k = 0x8F1BBCDC;
#X text 1157 373 k = 0xCA62C1D6;
#X obj 29 536 outlet;
#X text 89 534 output : f and k;
#X connect 0 0 3 0;
#X connect 0 1 1 0;
#X connect 1 0 5 0;
#X connect 1 1 2 0;
#X connect 2 0 7 0;
#X connect 2 1 11 0;
#X connect 3 0 8 0;
#X connect 3 1 8 1;
#X connect 4 0 12 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X connect 6 0 13 0;
#X connect 7 0 6 0;
#X connect 7 1 6 1;
#X connect 8 0 9 0;
#X connect 9 0 25 0;
#X connect 10 0 14 0;
#X connect 11 0 10 0;
#X connect 11 1 10 1;
#X connect 12 0 25 0;
#X connect 13 0 25 0;
#X connect 14 0 25 0;
#X connect 15 0 0 0;
#X restore 590 463 pd sha1-computefk;
#N canvas 242 50 668 385 sha1-computew 0;
#X obj 27 18 inlet;
#X obj 286 132 expr chunk[($i1*2)-6] ^ chunk[($i1*2)-16] ^ chunk[($i1*2)-28] ^ chunk[($i1*2)-32] \; chunk[($i1*2)-5] ^ chunk[($i1*2)-15] ^ chunk[($i1*2)-27] ^ chunk[($i1*2)-31];
#X obj 258 102 t f f;
#X obj 286 203 expr (($i1 << 1) % 65536) ^ ($i2 >> 15) \; (($i2 << 1) % 65536) ^ ($i1 >> 15);
#X obj 27 67 moses 16;
#X obj 27 135 expr chunk[($i1*2)] \; chunk[($i1*2)+1];
#X obj 258 272 pack f f f;
#X obj 258 241 * 2;
#X obj 27 350 outlet;
#X obj 259 349 outlet;
#X obj 258 299 s chunk;
#X text 317 101 generate words for 16 <= i <= 79;
#X text 158 134 input word;
#X connect 0 0 4 0;
#X connect 1 0 3 0;
#X connect 1 1 3 1;
#X connect 2 0 7 0;
#X connect 2 1 1 0;
#X connect 3 0 6 1;
#X connect 3 0 8 0;
#X connect 3 1 6 2;
#X connect 3 1 9 0;
#X connect 4 0 5 0;
#X connect 4 1 2 0;
#X connect 5 0 8 0;
#X connect 5 1 9 0;
#X connect 6 0 10 0;
#X connect 7 0 6 0;
#X restore 716 462 pd sha1-computew;
#X obj 569 338 until;
#X obj 599 364 + 1;
#X obj 569 364 i;
#X msg 602 315 0;
#X obj 569 289 t b b;
#X msg 569 315 80;
#X obj 275 13 inlet;
#X obj 570 150 until;
#X obj 600 176 + 1;
#X msg 570 127 10;
#X obj 570 176 i;
#X obj 570 255 tabwrite registers;
#X obj 570 202 t f f;
#X obj 570 102 t f b;
#X msg 613 150 0;
#X obj 275 53 t b b b;
#X obj 37 165 i;
#X msg 70 118 0;
#X obj 37 92 t b b;
#X obj 437 277 tabread registers;
#X msg 37 118 5;
#X obj 310 278 tabread registers;
#N canvas 707 678 374 175 sha1-add 0;
#X obj 21 56 expr (($i1+$i3) + (($i2+$i4) / 65536)) % 65536 \; ($i2 + $i4) % 65536;
#X obj 300 18 inlet;
#X obj 21 18 inlet;
#X obj 114 18 inlet;
#X obj 207 18 inlet;
#X obj 21 107 outlet;
#X obj 300 106 outlet;
#X connect 0 0 5 0;
#X connect 0 1 6 0;
#X connect 1 0 0 3;
#X connect 2 0 0 0;
#X connect 3 0 0 1;
#X connect 4 0 0 2;
#X restore 199 312 pd sha1-add;
#X obj 67 165 + 2;
#X obj 191 254 + 1;
#X obj 437 254 + 1;
#X msg 166 385 \$1 \$2 \$3;
#X obj 166 359 pack f f f;
#X obj 166 334 i;
#X obj 37 188 t f f;
#X obj 37 141 until;
#X obj 37 212 t b f f f f f;
#X obj 166 411 s sha1hash;
#X obj 72 278 tabread sha1hash;
#X obj 191 278 tabread sha1hash;
#X obj 570 228 tabread sha1hash;
#X text 610 101 initialize registers for new chunk \; hash[] -> registers[];
#X text 79 91 update hash table for this chunck;
#X text 617 289 main loop processing chunk;
#X text 426 712 b = a \; \; c = b rightrotate 2 \; \; d = c \; \; e = d;
#X text 48 445 a =;
#X text 452 447 + e;
#X text 596 445 + f + k;
#X text 736 444 + word;
#X text 283 312 hash[] += registers[];
#X text 401 26 SHA1 : all 32 bit numbers are treated as 16 bit pairs \; (see Wikipedia for pseudo-code);
#X connect 0 0 6 0;
#X connect 0 1 6 1;
#X connect 0 2 1 0;
#X connect 0 3 1 1;
#X connect 1 0 6 2;
#X connect 1 1 6 3;
#X connect 3 0 7 0;
#X connect 3 1 7 1;
#X connect 4 0 8 0;
#X connect 4 1 8 1;
#X connect 5 0 3 0;
#X connect 5 1 4 0;
#X connect 5 2 13 0;
#X connect 5 3 14 0;
#X connect 6 0 8 2;
#X connect 6 1 8 3;
#X connect 7 0 11 0;
#X connect 7 1 9 1;
#X connect 8 0 7 2;
#X connect 8 1 7 3;
#X connect 9 0 10 0;
#X connect 11 0 9 0;
#X connect 11 1 12 0;
#X connect 12 0 9 2;
#X connect 12 1 9 3;
#X connect 12 2 9 4;
#X connect 12 3 9 5;
#X connect 12 4 9 6;
#X connect 12 5 9 7;
#X connect 12 6 9 8;
#X connect 12 7 9 9;
#X connect 13 0 0 0;
#X connect 14 0 1 2;
#X connect 14 1 1 3;
#X connect 15 0 17 0;
#X connect 16 0 17 1;
#X connect 17 0 16 0;
#X connect 17 0 5 0;
#X connect 18 0 17 1;
#X connect 19 0 20 0;
#X connect 19 1 18 0;
#X connect 20 0 15 0;
#X connect 21 0 30 0;
#X connect 22 0 25 0;
#X connect 23 0 25 1;
#X connect 24 0 22 0;
#X connect 25 0 23 0;
#X connect 25 0 27 0;
#X connect 27 0 50 0;
#X connect 27 1 26 1;
#X connect 28 0 24 0;
#X connect 28 1 29 0;
#X connect 29 0 25 1;
#X connect 30 0 33 0;
#X connect 30 1 19 0;
#X connect 30 2 28 0;
#X connect 31 0 44 0;
#X connect 32 0 31 1;
#X connect 33 0 35 0;
#X connect 33 1 32 0;
#X connect 34 0 37 3;
#X connect 35 0 45 0;
#X connect 36 0 37 2;
#X connect 37 0 42 1;
#X connect 37 1 42 2;
#X connect 38 0 31 1;
#X connect 39 0 49 0;
#X connect 40 0 34 0;
#X connect 41 0 47 0;
#X connect 42 0 41 0;
#X connect 43 0 42 0;
#X connect 44 0 46 0;
#X connect 44 1 38 0;
#X connect 45 0 31 0;
#X connect 46 0 43 0;
#X connect 46 1 43 1;
#X connect 46 2 48 0;
#X connect 46 3 39 0;
#X connect 46 4 36 0;
#X connect 46 5 40 0;
#X connect 48 0 37 0;
#X connect 49 0 37 1;
#X connect 50 0 26 0;
#X restore 94 376 pd sha1-processchunk;
#N canvas 185 97 469 496 sha1-flushwebsocketkey 0;
#X obj 81 235 t b f;
#X obj 81 210 list split 2;
#X obj 162 235 * 256;
#X obj 113 261 +;
#X obj 113 412 list prepend 0;
#X obj 113 438 s chunk;
#X obj 113 344 t b l;
#X obj 113 287 list prepend;
#X obj 113 314 list split 30;
#X obj 113 388 list append 32768 0;
#X obj 48 19 inlet;
#N canvas 227 128 402 294 sha1-clearchunk 0;
#X obj 54 121 until;
#X obj 84 147 + 1;
#X obj 54 147 i;
#X msg 97 121 0;
#X obj 54 26 inlet;
#X msg 54 98 160;
#X obj 54 174 t b f;
#X obj 54 200 0;
#X obj 54 228 tabwrite chunk;
#X obj 54 73 t b b;
#X connect 0 0 2 0;
#X connect 1 0 2 1;
#X connect 2 0 1 0;
#X connect 2 0 6 0;
#X connect 3 0 2 1;
#X connect 4 0 9 0;
#X connect 5 0 0 0;
#X connect 6 0 7 0;
#X connect 6 1 8 1;
#X connect 7 0 8 0;
#X connect 9 0 5 0;
#X connect 9 1 3 0;
#X restore 194 184 pd sha1-clearchunk;
#X obj 81 144 t f b;
#X text 196 210 <- convert stream to words (2x16bit);
#X text 215 286 <- get 15 words \; for fixed length (60 bytes) \; websocket key + magic string;
#X text 253 388 <- append bit 1 to message \; specific fixed position \; for 60 bytes string \;;
#X obj 194 260 loadbang;
#X obj 81 184 list append;
#X obj 19 90 list append;
#X obj 48 65 list split 1;
#X obj 49 114 t b f;
#X connect 0 0 17 1;
#X connect 0 1 3 0;
#X connect 1 0 0 0;
#X connect 1 2 2 0;
#X connect 1 2 17 1;
#X connect 2 0 3 1;
#X connect 3 0 7 0;
#X connect 4 0 5 0;
#X connect 6 0 7 1;
#X connect 6 1 9 0;
#X connect 7 0 8 0;
#X connect 8 0 6 0;
#X connect 8 2 7 1;
#X connect 9 0 4 0;
#X connect 10 0 19 0;
#X connect 12 0 17 0;
#X connect 12 1 11 0;
#X connect 16 0 7 1;
#X connect 16 0 17 1;
#X connect 17 0 1 0;
#X connect 18 0 19 0;
#X connect 19 0 20 0;
#X connect 19 1 18 1;
#X connect 20 0 18 0;
#X connect 20 1 12 0;
#X restore 140 255 pd sha1-flushwebsocketkey;
#N canvas 186 95 444 287 sha1-paddingchunk 0;
#N canvas 240 134 413 283 sha1-clearchunk 0;
#X obj 49 120 until;
#X obj 79 146 + 1;
#X obj 49 146 i;
#X msg 92 120 0;
#X obj 49 27 inlet;
#X msg 49 97 160;
#X obj 49 173 t b f;
#X obj 49 199 0;
#X obj 49 227 tabwrite chunk;
#X obj 49 72 t b b;
#X connect 0 0 2 0;
#X connect 1 0 2 1;
#X connect 2 0 1 0;
#X connect 2 0 6 0;
#X connect 3 0 2 1;
#X connect 4 0 9 0;
#X connect 5 0 0 0;
#X connect 6 0 7 0;
#X connect 6 1 8 1;
#X connect 7 0 8 0;
#X connect 9 0 5 0;
#X connect 9 1 3 0;
#X restore 75 125 pd sha1-clearchunk;
#X msg 43 185 31 480;
#X obj 43 28 inlet;
#X obj 43 72 t b b;
#X obj 43 214 s chunk;
#X text 210 121 one more zero padding chunk \; is needed to put the 64 bits \; final string for sha1 input;
#X text 89 184 <-length of original message is coded here;
#X connect 1 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 3 1 0 0;
#X restore 76 417 pd sha1-paddingchunk;
#N canvas 187 96 427 369 flushsha1hash 0;
#X obj 58 172 tabread sha1hash;
#X obj 58 199 expr $i1 % 256 \; $i1 / 256;
#X obj 58 241 list prepend;
#X obj 58 268 list split 20;
#X obj 58 120 until;
#X obj 88 146 + 1;
#X obj 58 146 i;
#X msg 101 120 0;
#X msg 58 97 10;
#X obj 58 72 t b b b;
#X obj 58 24 inlet;
#X obj 58 317 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 2 0;
#X connect 2 0 3 0;
#X connect 3 0 11 0;
#X connect 3 2 2 1;
#X connect 4 0 6 0;
#X connect 5 0 6 1;
#X connect 6 0 5 0;
#X connect 6 0 0 0;
#X connect 7 0 6 1;
#X connect 8 0 4 0;
#X connect 9 0 8 0;
#X connect 9 1 7 0;
#X connect 9 2 2 1;
#X connect 10 0 9 0;
#X restore 39 469 pd flushsha1hash;
#N canvas 190 87 650 658 base64encoder 0;
#X obj 160 117 list append;
#X obj 183 92 list split 3;
#X obj 183 143 t b l;
#X obj 43 233 list;
#X obj 265 258 list;
#X obj 61 117 list length;
#X obj 43 167 i;
#X obj 386 257 unpack f f f;
#X obj 386 286 expr $i3 % 64 \; (($i2 % 16) * 4) + ($i3 >> 6) \; (($i1 % 4) * 16) + ($i2 >> 4) \; $i1 >> 2;
#X obj 61 142 % 3;
#X obj 282 377 moses 26;
#X obj 335 404 moses 52;
#X obj 282 404 + 65;
#X obj 335 430 + 71;
#X obj 475 456 - 4;
#X obj 388 456 43;
#X obj 417 456 47;
#X obj 43 258 unpack f f;
#X obj 388 430 select 62 63 64;
#X obj 265 286 expr 64 \; 64 \; ($i1 % 4) * 16 \; $i1 >> 2;
#X obj 43 286 expr 64 \; ($i2 % 16) * 4 \; (($i1 % 4) * 16) + ($i2 >> 4) \; $i1 >> 2;
#X obj 446 456 61;
#X obj 388 493 list prepend;
#X obj 388 519 t l l;
#X obj 25 56 t b b l l b;
#X obj 25 575 list;
#X obj 25 619 outlet;
#X obj 25 14 inlet;
#X text 83 13 encodes any list of bytes in base64;
#X text 344 376 A -> Z;
#X text 399 402 a -> z;
#X text 491 430 + / = and 0 -> 9;
#X text 276 92 convert 3 bytes to 4 x 6 bits;
#X text 479 255 4 x 6 bits;
#X text 301 250 2 x 6 bits \; add ==;
#X text 125 250 3 x 6 bits \; add =;
#X text 122 196 remaining bytes (< 3);
#X obj 43 196 select 2 1;
#N canvas -178 617 174 65 reminder 0;
#X obj 156 26 loadbang;
#X obj 23 141 print;
#X obj 23 69 list tosymbol;
#X obj 23 99 list trim;
#X msg 155 67 13 10 13 10 87 101 98 115 111 99 107 101 116 32 83 101 114 118 101 114 32 105 110 32 97 32 80 97 116 99 104 32 40 99 41 32 50 48 49 54 32 98 121 32 78 105 99 111 108 97 115 32 76 104 111 109 109 101 116 32 40 110 108 104 111 109 109 101 116 64 103 109 97 105 108 46 99 111 109 41 13 10 84 104 105 115 32 112 114 111 103 114 97 109 32 105 115 32 114 101 108 101 97 115 101 100 32 117 110 100 101 114 32 116 104 101 32 67 114 101 97 116 105 118 101 32 67 111 109 109 111 110 115 32 65 116 116 114 105 98 117 116 105 111 110 45 78 111 110 67 111 109 109 101 114 99 105 97 108 45 83 104 97 114 101 65 108 105 107 101 32 52 46 48 32 73 110 116 101 114 110 97 116 105 111 110 97 108 32 40 67 67 32 66 89 45 78 67 45 83 65 32 52 46 48 41 32 108 105 99 101 110 115 101 46 32 89 111 117 32 109 97 121 32 110 111 116 32 117 115 101 32 116 104 101 32 109 97 116 101 114 105 97 108 32 102 111 114 32 99 111 109 109 101 114 99 105 97 108 32 112 117 114 112 111 115 101 115 44 32 105 110 116 101 110 100 101 100 32 102 111 114 32 97 110 121 32 99 111 109 109 101 114 99 105 97 108 32 97 100 118 97 110 116 97 103 101 32 111 114 32 109 111 110 101 116 97 114 121 32 99 111 109 112 101 110 115 97 116 105 111 110 44 32 105 110 99 108 117 100 105 110 103 32 112 117 98 108 105 99 108 121 32 102 117 110 100 101 100 32 97 114 116 105 115 116 105 99 97 108 44 32 101 100 117 99 97 116 105 111 110 97 108 32 111 114 32 112 114 111 109 111 116 105 111 110 97 108 32 97 99 116 105 118 105 116 105 101 115 46 13 10;
#X connect 0 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 2 0;
#X restore 520 619 pd reminder;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 0 1;
#X connect 1 1 3 1;
#X connect 1 1 4 1;
#X connect 2 0 0 0;
#X connect 2 1 7 0;
#X connect 3 0 17 0;
#X connect 4 0 19 0;
#X connect 5 0 9 0;
#X connect 6 0 37 0;
#X connect 7 0 8 0;
#X connect 7 1 8 1;
#X connect 7 2 8 2;
#X connect 8 0 10 0;
#X connect 8 1 10 0;
#X connect 8 2 10 0;
#X connect 8 3 10 0;
#X connect 9 0 6 1;
#X connect 10 0 12 0;
#X connect 10 1 11 0;
#X connect 11 0 13 0;
#X connect 11 1 18 0;
#X connect 12 0 22 0;
#X connect 13 0 22 0;
#X connect 14 0 22 0;
#X connect 15 0 22 0;
#X connect 16 0 22 0;
#X connect 17 0 20 0;
#X connect 17 1 20 1;
#X connect 18 0 15 0;
#X connect 18 1 16 0;
#X connect 18 2 21 0;
#X connect 18 3 14 0;
#X connect 19 0 10 0;
#X connect 19 1 10 0;
#X connect 19 2 10 0;
#X connect 19 3 10 0;
#X connect 20 0 10 0;
#X connect 20 1 10 0;
#X connect 20 2 10 0;
#X connect 20 3 10 0;
#X connect 21 0 22 0;
#X connect 22 0 23 0;
#X connect 23 0 25 1;
#X connect 23 1 22 1;
#X connect 24 0 25 0;
#X connect 24 1 6 0;
#X connect 24 2 1 0;
#X connect 24 3 5 0;
#X connect 24 4 22 1;
#X connect 25 0 26 0;
#X connect 27 0 24 0;
#X connect 37 0 3 0;
#X connect 37 1 4 0;
#X restore 39 501 pd base64encoder;
#X msg 139 308 \; sha1hash 0 26437 8961 61389 43913 39098 56574 4146 21622 50130 57840;
#X obj 39 216 t b l;
#X obj 39 254 t b b b b b;
#X obj 39 21 inlet;
#X obj 39 552 outlet;
#X obj 39 152 list append 50 53 56 69 65 70 65 53 45 69 57 49 52 45 52 55 68 65 45 57 53 67 65 45 67 53 65 66 48 68 67 56 53 66 49 49;
#X obj 39 90 list split 24;
#X text 150 130 add websocket magic string;
#X text 239 376 <-- SHA1 MAIN LOOP;
#X text 158 501 <- BASE64 ENCODE;
#X obj 151 75 table chunk 160;
#X obj 151 50 table sha1hash 10;
#X obj 151 23 table registers 10;
#X text 287 22 a (0+1) \, b (2+3) \, c (4+5) \, d (6+7) \, e (8+9);
#X text 155 289 initialize variables;
#X connect 3 0 4 0;
#X connect 4 0 9 0;
#X connect 6 0 7 0;
#X connect 6 1 1 0;
#X connect 7 0 3 0;
#X connect 7 1 0 0;
#X connect 7 2 2 0;
#X connect 7 3 0 0;
#X connect 7 4 5 0;
#X connect 8 0 11 0;
#X connect 10 0 6 0;
#X connect 11 0 10 0;
#X restore 104 406 pd websocketresponsekey;
#X obj 104 459 list prepend 83 101 99 45 87 101 98 83 111 99 107 101 116 45 65 99 99 101 112 116 58 32;
#X obj 104 516 list append 13 10;
#X obj 14 21 inlet;
#X obj 176 78 loadbang;
#X obj 104 900 outlet;
#X text 228 515 '<cr><lf>';
#N canvas 139 58 520 743 routelist 0;
#X obj 313 411 list;
#X obj 313 440 list split 1;
#X obj 317 187 list length;
#X obj 176 327 until;
#X obj 176 300 i;
#X obj 59 409 list;
#X obj 59 437 list split 1;
#X obj 176 356 t b b;
#X obj 181 500 ==;
#X obj 181 530 route 0;
#X obj 181 557 t b b;
#X obj 290 152 t l l;
#X obj 111 214 <;
#X obj 111 241 route 1;
#X obj 37 185 list length;
#X obj 336 641 list;
#X obj 63 612 list;
#X obj 149 272 t b b;
#X obj 290 129 list;
#X obj 231 557 t b;
#X obj 61 646 spigot;
#X msg 108 618 1;
#X msg 143 629 0;
#X obj 37 68 t l l b b;
#X obj 61 692 outlet;
#X obj 336 692 outlet;
#X obj 37 20 inlet;
#X obj 311 20 inlet;
#X text 79 668 matching : return rest of line;
#X text 347 664 not found : pass line;
#X text 147 43 compare ascii strings \; (could be better..);
#X connect 0 0 1 0;
#X connect 1 0 8 1;
#X connect 1 1 0 1;
#X connect 2 0 4 1;
#X connect 2 0 12 1;
#X connect 3 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X connect 6 1 5 1;
#X connect 6 1 16 1;
#X connect 7 0 5 0;
#X connect 7 1 0 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 9 1 19 0;
#X connect 10 0 15 0;
#X connect 10 0 22 0;
#X connect 10 1 3 1;
#X connect 11 0 0 1;
#X connect 11 1 2 0;
#X connect 12 0 13 0;
#X connect 13 0 15 0;
#X connect 13 1 17 0;
#X connect 14 0 12 0;
#X connect 15 0 25 0;
#X connect 16 0 20 0;
#X connect 17 0 16 0;
#X connect 17 1 4 0;
#X connect 18 0 11 0;
#X connect 20 0 24 0;
#X connect 21 0 20 1;
#X connect 22 0 20 1;
#X connect 23 0 14 0;
#X connect 23 1 15 1;
#X connect 23 1 5 1;
#X connect 23 2 18 0;
#X connect 23 3 21 0;
#X connect 26 0 23 0;
#X connect 27 0 18 1;
#X restore 95 161 pd routelist;
#X text 148 489 'Sec-WebSocket-Accept: ' + processed key;
#X obj 806 23 inlet;
#X msg 185 805 send \$1;
#X obj 104 832 list prepend;
#X obj 455 899 outlet;
#X text 210 640 'HTTP/1.1 101 Web Socket Protocol Handshake' \; 'Upgrade: websocket' \; 'Connection: Upgrade';
#N canvas 142 56 496 749 routelist 0;
#X obj 313 411 list;
#X obj 313 442 list split 1;
#X obj 317 187 list length;
#X obj 176 327 until;
#X obj 176 300 i;
#X obj 59 409 list;
#X obj 59 437 list split 1;
#X obj 176 356 t b b;
#X obj 181 500 ==;
#X obj 181 530 route 0;
#X obj 181 557 t b b;
#X obj 290 152 t l l;
#X obj 111 214 <;
#X obj 111 241 route 1;
#X obj 37 185 list length;
#X obj 327 641 list;
#X obj 63 612 list;
#X obj 149 272 t b b;
#X obj 290 129 list;
#X obj 231 557 t b;
#X obj 61 646 spigot;
#X msg 108 618 1;
#X msg 143 629 0;
#X obj 37 68 t l l b b;
#X obj 61 692 outlet;
#X obj 327 692 outlet;
#X obj 37 20 inlet;
#X obj 311 20 inlet;
#X text 73 669 matching : return rest of line;
#X text 341 665 not found : pass line;
#X text 135 33 compare ascii strings \; (could be better..);
#X connect 0 0 1 0;
#X connect 1 0 8 1;
#X connect 1 1 0 1;
#X connect 2 0 4 1;
#X connect 2 0 12 1;
#X connect 3 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X connect 6 1 5 1;
#X connect 6 1 16 1;
#X connect 7 0 5 0;
#X connect 7 1 0 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 9 1 19 0;
#X connect 10 0 15 0;
#X connect 10 0 22 0;
#X connect 10 1 3 1;
#X connect 11 0 0 1;
#X connect 11 1 2 0;
#X connect 12 0 13 0;
#X connect 13 0 15 0;
#X connect 13 1 17 0;
#X connect 14 0 12 0;
#X connect 15 0 25 0;
#X connect 16 0 20 0;
#X connect 17 0 16 0;
#X connect 17 1 4 0;
#X connect 18 0 11 0;
#X connect 20 0 24 0;
#X connect 21 0 20 1;
#X connect 22 0 20 1;
#X connect 23 0 14 0;
#X connect 23 1 15 1;
#X connect 23 1 5 1;
#X connect 23 2 18 0;
#X connect 23 3 21 0;
#X connect 26 0 23 0;
#X connect 27 0 18 1;
#X restore 781 276 pd routelist;
#X msg 862 248 71 69 84 32 47;
#X text 267 99 intercept "Sec-WebSocket-Key: " line;
#X obj 756 357 list;
#X msg 176 119 83 101 99 45 87 101 98 83 111 99 107 101 116 45 75 101 121 58 32;
#N canvas 140 56 760 800 webserver 0;
#X obj 88 139 t b;
#X obj 88 109 route 32;
#X obj 21 21 inlet;
#X obj 21 75 route bang;
#X obj 141 746 outlet;
#X obj 141 139 t b;
#X obj 323 361 int;
#X obj 323 338 / 10;
#X obj 323 384 select 0;
#X obj 368 408 t f b;
#X obj 323 291 t f b;
#X obj 411 338 % 10;
#X obj 323 314 t f f;
#X obj 411 362 + 48;
#X obj 411 408 t l l;
#X obj 323 438 list;
#X obj 411 384 list append;
#X obj 323 468 list prepend 67 111 110 116 101 110 116 45 76 101 110 103 116 104 58 32;
#X obj 323 508 list append 13 10 13 10;
#X obj 242 539 list prepend;
#X obj 242 238 t l l;
#X obj 323 266 list length;
#X obj 242 193 list;
#X obj 267 23 inlet;
#N canvas 185 97 499 692 favicon 0;
#X msg 31 98 72 84 84 80 47 49 46 48 32 50 48 48 32 79 75 13 10 67 111 110 110 101 99 116 105 111 110 58 32 75 101 101 112 45 65 108 105 118 101 13 10 67 111 110 116 101 110 116 45 76 101 110 103 116 104 58 32 49 52 54 54 13 10 67 111 110 116 101 110 116 45 84 121 112 101 58 32 105 109 97 103 101 47 112 110 103 13 10 13 10 0 0 1 0 1 0 48 48 0 0 1 0 8 0 164 5 0 0 22 0 0 0 137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 3 0 0 0 96 220 9 181 0 0 3 0 80 76 84 69 215 215 215 243 243 243 229 229 229 106 107 106 130 131 130 26 35 30 189 189 189 77 79 78 161 161 161 0 203 89 0 239 97 0 158 68 0 102 36 249 249 249 236 236 236 255 255 255 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 29 29 29 30 30 30 31 31 31 32 32 32 33 33 33 34 34 34 35 35 35 36 36 36 37 37 37 38 38 38 39 39 39 40 40 40 41 41 41 42 42 42 43 43 43 44 44 44 45 45 45 46 46 46 47 47 47 48 48 48 49 49 49 50 50 50 51 51 51 52 52 52 53 53 53 54 54 54 55 55 55 56 56 56 57 57 57 58 58 58 59 59 59 60 60 60 61 61 61 62 62 62 63 63 63 64 64 64 65 65 65 66 66 66 67 67 67 68 68 68 69 69 69 70 70 70 71 71 71 72 72 72 73 73 73 74 74 74 75 75 75 76 76 76 77 77 77 78 78 78 79 79 79 80 80 80 81 81 81 82 82 82 83 83 83 84 84 84 85 85 85 86 86 86 87 87 87 88 88 88 89 89 89 90 90 90 91 91 91 92 92 92 93 93 93 94 94 94 95 95 95 96 96 96 97 97 97 98 98 98 99 99 99 100 100 100 101 101 101 102 102 102 103 103 103 104 104 104 105 105 105 106 106 106 107 107 107 108 108 108 109 109 109 110 110 110 111 111 111 112 112 112 113 113 113 114 114 114 115 115 115 116 116 116 117 117 117 118 118 118 119 119 119 120 120 120 121 121 121 122 122 122 123 123 123 124 124 124 125 125 125 126 126 126 127 127 127 128 128 128 129 129 129 130 130 130 131 131 131 132 132 132 133 133 133 134 134 134 135 135 135 136 136 136 137 137 137 138 138 138 139 139 139 140 140 140 141 141 141 142 142 142 143 143 143 144 144 144 145 145 145 146 146 146 147 147 147 148 148 148 149 149 149 150 150 150 151 151 151 152 152 152 153 153 153 154 154 154 155 155 155 156 156 156 157 157 157 158 158 158 159 159 159 160 160 160 161 161 161 162 162 162 163 163 163 164 164 164 165 165 165 166 166 166 167 167 167 168 168 168 169 169 169 170 170 170 171 171 171 172 172 172 173 173 173 174 174 174 175 175 175 176 176 176 177 177 177 178 178 178 179 179 179 180 180 180 181 181 181 182 182 182 183 183 183 184 184 184 185 185 185 186 186 186 187 187 187 188 188 188 189 189 189 190 190 190 191 191 191 192 192 192 193 193 193 194 194 194 195 195 195 196 196 196 197 197 197 198 198 198 199 199 199 200 200 200 201 201 201 202 202 202 203 203 203 204 204 204 205 205 205 206 206 206 207 207 207 208 208 208 209 209 209 210 210 210 211 211 211 212 212 212 213 213 213 214 214 214 215 215 215 216 216 216 217 217 217 218 218 218 219 219 219 220 220 220 221 221 221 222 222 222 223 223 223 224 224 224 225 225 225 226 226 226 227 227 227 228 228 228 229 229 229 230 230 230 231 231 231 232 232 232 233 233 233 234 234 234 235 235 235 236 236 236 237 237 237 238 238 238 239 239 239 240 240 240 241 241 241 242 242 242 243 243 243 244 244 244 245 245 245 246 246 246 247 247 247 248 248 248 249 249 249 250 250 250 251 251 251 252 252 252 253 253 253 254 254 254 255 255 255 126 105 64 253 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 2 74 73 68 65 84 72 137 189 85 219 182 234 32 12 12 33 36 244 66 250 255 127 123 134 80 171 118 239 109 235 203 25 186 170 11 153 76 110 68 218 190 4 253 39 130 187 167 128 123 187 67 32 91 36 27 128 119 189 67 168 235 188 150 210 159 105 177 11 137 32 200 50 175 203 60 207 203 186 76 230 219 71 202 174 16 231 231 121 90 215 149 218 37 33 229 178 226 48 48 47 197 52 93 17 26 8 203 78 152 74 185 71 152 226 60 0 194 231 204 30 10 79 194 45 133 61 134 169 199 112 67 65 144 156 112 106 177 245 22 33 163 14 40 193 146 87 153 110 197 32 101 89 74 199 186 220 82 240 106 229 64 86 190 36 48 105 205 37 75 71 85 242 79 231 163 210 206 206 53 87 82 85 34 254 120 124 16 154 67 193 164 14 232 31 160 118 184 180 105 191 8 120 134 87 103 88 14 24 69 27 7 161 26 51 177 34 65 0 159 64 89 186 125 197 213 58 8 2 127 96 42 119 27 143 53 158 222 234 50 132 139 120 58 234 96 20 94 122 242 95 192 35 6 203 212 187 44 234 32 185 135 211 122 186 222 16 83 193 119 181 78 216 158 132 22 103 219 187 4 146 204 169 197 215 198 191 16 144 94 122 181 207 185 84 39 13 202 246 66 216 82 16 90 35 4 6 62 2 109 225 73 171 37 111 216 99 8 135 66 123 33 108 27 215 82 80 53 20 28 69 111 14 186 80 206 12 43 86 209 45 103 66 111 64 164 149 123 27 90 49 74 138 55 90 209 91 83 244 153 38 16 248 65 104 146 155 224 110 246 145 137 115 21 37 52 50 83 142 220 195 122 215 246 147 66 152 105 9 134 164 151 190 136 105 159 63 153 145 90 180 178 16 189 43 192 56 108 131 2 203 180 17 70 172 213 134 153 11 151 194 148 255 136 1 81 114 53 171 8 162 79 101 117 41 232 55 184 34 216 68 125 210 89 1 117 72 78 162 48 164 232 182 228 157 46 184 37 181 82 252 11 208 89 161 87 26 63 40 50 196 163 167 120 111 221 81 197 31 10 113 28 219 112 73 219 94 234 215 178 191 43 200 184 126 105 116 230 163 5 121 172 128 159 20 136 112 69 168 183 39 54 211 142 93 162 115 232 77 161 87 45 160 127 221 124 180 87 122 81 216 242 49 147 206 168 99 97 52 160 17 15 66 170 229 6 76 14 151 92 197 6 242 219 26 31 251 11 245 121 102 137 181 94 67 199 140 139 24 18 210 112 9 30 67 154 30 105 184 198 115 84 126 133 175 9 255 0 35 195 94 127 163 236 191 0 0 0 0 0 73 69 78 68 174 66 96 130;
#X obj 31 24 inlet;
#X obj 31 1379 outlet;
#X text 139 64 favicon hexadecimal;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X restore 141 193 pd favicon;
#X text 285 192 <- stores webpage;
#X obj 242 567 list prepend 72 84 84 80 47 49 46 49 32 50 48 48 32 79 75 13 10 67 111 110 110 101 99 116 105 111 110 58 32 99 108 111 115 101 13 10 67 97 99 104 101 45 67 111 110 116 114 111 108 58 32 110 111 45 99 97 99 104 101 44 32 110 111 45 115 116 111 114 101 13 10 69 120 112 105 114 101 115 58 32 87 101 100 44 32 48 56 32 65 117 103 32 49 57 55 51 32 49 55 58 48 48 58 48 48 32 71 77 84 13 10 67 111 110 116 101 110 116 45 84 121 112 101 58 32 116 101 120 116 47 104 116 109 108 13 10;
#X text 496 445 http header 'content length';
#X text 483 545 other http headers;
#X connect 0 0 22 0;
#X connect 1 0 0 0;
#X connect 1 1 5 0;
#X connect 2 0 3 0;
#X connect 3 1 1 0;
#X connect 5 0 24 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 8 0 15 0;
#X connect 8 1 9 0;
#X connect 9 0 12 0;
#X connect 10 0 12 0;
#X connect 10 1 16 1;
#X connect 11 0 13 0;
#X connect 12 0 7 0;
#X connect 12 1 11 0;
#X connect 13 0 16 0;
#X connect 14 0 15 1;
#X connect 14 1 16 1;
#X connect 15 0 17 0;
#X connect 16 0 14 0;
#X connect 17 0 18 0;
#X connect 18 0 19 1;
#X connect 19 0 26 0;
#X connect 20 0 19 0;
#X connect 20 1 21 0;
#X connect 21 0 10 0;
#X connect 22 0 20 0;
#X connect 23 0 22 1;
#X connect 24 0 4 0;
#X connect 26 0 4 0;
#X restore 756 390 pd webserver;
#X obj 185 543 loadbang;
#X obj 104 663 list prepend;
#X obj 104 703 list append 13 10;
#X msg 185 569 72 84 84 80 47 49 46 49 32 49 48 49 32 87 101 98 32 83 111 99 107 101 116 32 80 114 111 116 111 99 111 108 32 72 97 110 100 115 104 97 107 101 13 10 85 112 103 114 97 100 101 58 32 119 101 98 115 111 99 107 101 116 13 10 67 111 110 110 101 99 116 105 111 110 58 32 85 112 103 114 97 100 101 13 10;
#X obj 756 566 list prepend;
#X text 251 405 <- PROCESS WEBSOCKET RESPONSE KEY;
#X text 846 390 <- WEB SERVER;
#X text 232 702 final'<cr><lf>' (empty line);
#X text 849 228 intercept "GET /" line;
#X obj 602 23 inlet;
#N canvas 135 63 396 392 splitline 0;
#X obj 43 81 route 10 13;
#X obj 117 134 t l l;
#X obj 92 185 list;
#X obj 117 107 list prepend;
#X obj 43 24 inlet;
#X obj 160 308 outlet;
#X obj 93 211 t l b;
#X obj 93 247 route bang;
#X obj 93 308 outlet;
#X connect 0 0 2 0;
#X connect 0 2 3 0;
#X connect 1 0 2 1;
#X connect 1 1 3 1;
#X connect 2 0 6 0;
#X connect 3 0 1 0;
#X connect 4 0 0 0;
#X connect 6 0 7 0;
#X connect 6 1 3 1;
#X connect 6 1 2 1;
#X connect 7 0 8 0;
#X connect 7 1 5 0;
#X restore 14 78 pd splitline;
#X obj 14 198 list;
#X obj 14 225 route bang;
#X obj 756 480 t l b;
#X obj 788 508 i;
#X msg 837 540 send \$1;
#X obj 104 748 t l b;
#X obj 185 776 i;
#X obj 788 896 outlet;
#X text 837 896 other http responses;
#X obj 756 606 t b l;
#X msg 682 731 list client;
#X text 57 21 HTTP requests;
#X text 545 22 webpage;
#X text 847 22 current socket;
#X text 150 899 'handshake' response (and socket number ->);
#X text 118 381 WEBSOCKET HANDSHAKE;
#X obj 104 345 list;
#X obj 140 251 list length;
#X obj 546 448 print websocket-server;
#X obj 546 401 t b b;
#X obj 104 322 select 1;
#X obj 81 251 t b b l;
#X obj 140 224 r websockets-list;
#X obj 104 276 i;
#X obj 104 299 < 24;
#X msg 546 424 connections limit reached (max 24);
#X obj 682 760 t b l;
#X obj 682 834 list;
#X obj 682 811 select 1;
#X text 318 731 send 'client' message to [iemnet/tcpserver] only -> socket-list will be received from its 5th outlet' \; (see [pd dispatch-sockets] in upper abstraction);
#X obj 682 787 i;
#X obj 725 760 r iemnet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 21 0;
#X connect 3 0 30 0;
#X connect 4 0 18 0;
#X connect 4 0 15 0;
#X connect 7 0 31 1;
#X connect 7 1 14 0;
#X connect 9 0 34 1;
#X connect 9 0 37 1;
#X connect 10 0 11 1;
#X connect 11 0 5 0;
#X connect 14 0 17 1;
#X connect 15 0 14 1;
#X connect 17 0 19 0;
#X connect 18 0 7 1;
#X connect 19 0 33 0;
#X connect 20 0 23 0;
#X connect 21 0 22 0;
#X connect 22 0 36 0;
#X connect 23 0 21 1;
#X connect 24 0 40 0;
#X connect 29 0 19 1;
#X connect 30 0 31 0;
#X connect 30 1 7 0;
#X connect 31 0 32 0;
#X connect 32 0 17 0;
#X connect 32 1 52 0;
#X connect 33 0 24 0;
#X connect 33 1 34 0;
#X connect 34 0 35 0;
#X connect 35 0 24 1;
#X connect 36 0 11 0;
#X connect 36 1 37 0;
#X connect 37 0 10 0;
#X connect 37 0 12 0;
#X connect 40 0 41 0;
#X connect 40 1 38 0;
#X connect 41 0 57 0;
#X connect 47 0 0 0;
#X connect 48 0 54 1;
#X connect 50 0 56 0;
#X connect 50 1 41 0;
#X connect 51 0 47 0;
#X connect 51 1 50 0;
#X connect 52 0 31 1;
#X connect 52 1 54 0;
#X connect 52 2 47 1;
#X connect 53 0 48 0;
#X connect 54 0 55 0;
#X connect 55 0 51 0;
#X connect 56 0 49 0;
#X connect 57 0 61 0;
#X connect 57 1 58 1;
#X connect 58 0 38 0;
#X connect 59 0 58 0;
#X connect 61 0 59 0;
#X connect 62 0 61 1;
#X restore 341 187 pd websocket-http;
#X text 663 294 detects disconnections;
#X text 443 286 add to websocket list;
#X text 757 338 removes socket from \; websocket clients list;
#X text 1072 565 output connected \; websockets list ->;
#X text 1137 175 current websockets list;
#X text 420 130 route websockets/http;
#X text 842 574 active client socket ->;
#X text 687 569 number of connected \; <- websocket clients;
#N canvas 93 50 1133 790 dispatch-sockets 0;
#X obj 27 320 route;
#X obj 59 342 route;
#X obj 91 364 route;
#X obj 123 386 route;
#X obj 423 119 loadbang;
#X obj 381 211 list append;
#X obj 423 148 t b b;
#X obj 841 740 outlet;
#X obj 27 24 inlet;
#X obj 78 24 inlet;
#X obj 155 408 route;
#X obj 187 430 route;
#X obj 219 452 route;
#X obj 251 474 route;
#X obj 27 133 pack f f;
#X obj 27 107 i;
#X obj 27 82 t b f;
#X obj 827 513 unpack f f;
#X obj 186 24 inlet;
#X obj 186 81 route client;
#X obj 253 135 list append -1;
#X obj 894 539 route -1;
#X obj 827 618 spigot;
#X obj 186 107 unpack f f;
#X obj 947 567 t b f;
#X obj 866 593 1;
#X obj 896 593 0;
#X obj 914 513 loadbang;
#X obj 827 644 t b f;
#X obj 289 666 route -1;
#X obj 342 739 outlet;
#X msg 939 686 list disconnectsocket \$1;
#X obj 939 740 outlet;
#X obj 295 313 route;
#X obj 327 335 route;
#X obj 359 357 route;
#X obj 391 379 route;
#X obj 423 401 route;
#X obj 455 423 route;
#X obj 487 445 route;
#X obj 519 467 route;
#X obj 571 315 route;
#X obj 603 337 route;
#X obj 635 359 route;
#X obj 667 381 route;
#X obj 699 403 route;
#X obj 731 425 route;
#X obj 763 447 route;
#X obj 795 469 route;
#X obj 381 79 r websockets-list;
#X text 989 739 to 'send buffer';
#X obj 381 261 unpack f f f f f f f f f f f f f f f f f f f f f f f f;
#X obj 381 236 list split 24;
#X msg 455 173 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1;
#X text 766 261 set 'route' objets to web-sockets numbers;
#X text 620 77 (sequential to avoid list recursion stack-overflows);
#X text 493 147 unallocated 'route' objects get '-1' value;
#X text 152 152 trick to use same path to \; disconnect all 'non-websockets';
#X text 628 741 http connection \, to webserver;
#X text 68 738 connected websocket \, to websocket-data;
#X text 481 235 (max: 24 websocket connections);
#X text 35 262 dispatch websockets/http connections;
#X text 939 640 disconnect all unused \; sockets keeped 'alive' \; by [iemnet/tcpserver];
#X text 230 24 list of sockets (from [iemnet/tcpserver] only);
#X text 632 55 ROUTE WEBSOCKETS/HTTP & DISCONNECT HTTP SOCKETS;
#X text 29 48 websocket bytestream;
#X connect 0 0 29 0;
#X connect 0 1 1 0;
#X connect 1 0 29 0;
#X connect 1 1 2 0;
#X connect 2 0 29 0;
#X connect 2 1 3 0;
#X connect 3 0 29 0;
#X connect 3 1 10 0;
#X connect 4 0 6 0;
#X connect 5 0 52 0;
#X connect 6 0 5 0;
#X connect 6 1 53 0;
#X connect 8 0 16 0;
#X connect 9 0 15 1;
#X connect 10 0 29 0;
#X connect 10 1 11 0;
#X connect 11 0 29 0;
#X connect 11 1 12 0;
#X connect 12 0 29 0;
#X connect 12 1 13 0;
#X connect 13 0 29 0;
#X connect 13 1 33 0;
#X connect 14 0 0 0;
#X connect 15 0 14 0;
#X connect 16 0 15 0;
#X connect 16 1 14 1;
#X connect 17 0 22 0;
#X connect 17 1 21 0;
#X connect 18 0 19 0;
#X connect 19 0 23 0;
#X connect 20 0 0 0;
#X connect 21 0 25 0;
#X connect 21 1 24 0;
#X connect 22 0 28 0;
#X connect 23 1 20 0;
#X connect 24 0 26 0;
#X connect 24 1 7 0;
#X connect 25 0 22 1;
#X connect 26 0 22 1;
#X connect 27 0 26 0;
#X connect 28 0 26 0;
#X connect 28 1 31 0;
#X connect 29 1 30 0;
#X connect 31 0 32 0;
#X connect 33 0 29 0;
#X connect 33 1 34 0;
#X connect 34 0 29 0;
#X connect 34 1 35 0;
#X connect 35 0 29 0;
#X connect 35 1 36 0;
#X connect 36 0 29 0;
#X connect 36 1 37 0;
#X connect 37 0 29 0;
#X connect 37 1 38 0;
#X connect 38 0 29 0;
#X connect 38 1 39 0;
#X connect 39 0 29 0;
#X connect 39 1 40 0;
#X connect 40 0 29 0;
#X connect 40 1 41 0;
#X connect 41 0 29 0;
#X connect 41 1 42 0;
#X connect 42 0 29 0;
#X connect 42 1 43 0;
#X connect 43 0 29 0;
#X connect 43 1 44 0;
#X connect 44 0 29 0;
#X connect 44 1 45 0;
#X connect 45 0 29 0;
#X connect 45 1 46 0;
#X connect 46 0 29 0;
#X connect 46 1 47 0;
#X connect 47 0 29 0;
#X connect 47 1 48 0;
#X connect 48 0 29 0;
#X connect 48 1 17 0;
#X connect 49 0 5 0;
#X connect 51 0 0 1;
#X connect 51 1 1 1;
#X connect 51 2 2 1;
#X connect 51 3 3 1;
#X connect 51 4 10 1;
#X connect 51 5 11 1;
#X connect 51 6 12 1;
#X connect 51 7 13 1;
#X connect 51 8 33 1;
#X connect 51 9 34 1;
#X connect 51 10 35 1;
#X connect 51 11 36 1;
#X connect 51 12 37 1;
#X connect 51 13 38 1;
#X connect 51 14 39 1;
#X connect 51 15 40 1;
#X connect 51 16 41 1;
#X connect 51 17 42 1;
#X connect 51 18 43 1;
#X connect 51 19 44 1;
#X connect 51 20 45 1;
#X connect 51 21 46 1;
#X connect 51 22 47 1;
#X connect 51 23 48 1;
#X connect 52 0 51 0;
#X connect 53 0 5 1;
#X restore 276 130 pd dispatch-sockets;
#X text 680 20 to tcpserver outlet 2 (number of connections);
#X text 1066 20 to tcpserver outlet 3 (current socket);
#X text 1087 51 to tcpserver outlet 5 (for socket list);
#X obj 341 313 t b;
#N canvas 92 55 649 605 detect_mrpeach/iemnet 0;
#X obj 83 464 list split 1;
#X obj 32 325 t b l b;
#X obj 150 494 list;
#X obj 32 19 inlet;
#X obj 171 563 outlet;
#X obj 83 493 t b f;
#X obj 118 390 list;
#X obj 51 389 t b l;
#X obj 32 413 list;
#X obj 83 439 t l;
#X obj 51 354 list split 100;
#X obj 32 65 t l l;
#X obj 85 95 list length;
#X obj 112 253 0;
#X obj 85 253 1;
#X obj 210 253 0;
#X obj 183 253 1;
#X obj 32 288 spigot 1;
#X obj 130 287 spigot 0;
#X obj 85 148 == 1;
#X obj 85 122 change;
#X obj 85 176 select 0 1;
#X obj 32 218 t l;
#X obj 156 218 t b b b;
#X obj 254 253 0;
#X obj 281 253 1;
#X obj 85 218 t b b b;
#X text 154 350 split incoming data list to \; prevent stack overlflows;
#X text 171 459 split list to bytes \; for stream-based operations;
#X text 318 286 <- this will change some operations \; behaviour in [pd send-buffer] \; and [pd websocket-http];
#X text 189 39 tcpserver externals output incoming messages differently: mrpeach/tcpserver outputs lists \; iemnet/tcpserver outputs stream of bytes \; detect [iemnet/tcpserver] when incoming list length == 1;
#X text 210 217 when mrpeach/tcpserver is used \, output lists as single bytes;
#X obj 254 287 s iemnet;
#X text 316 253 <- iemnet detected;
#X connect 0 0 5 0;
#X connect 0 1 2 1;
#X connect 1 0 8 0;
#X connect 1 1 10 0;
#X connect 2 0 0 0;
#X connect 3 0 11 0;
#X connect 5 0 2 0;
#X connect 5 1 4 0;
#X connect 6 0 10 0;
#X connect 7 0 6 0;
#X connect 7 1 9 0;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X connect 10 0 7 0;
#X connect 10 1 6 1;
#X connect 10 2 8 1;
#X connect 11 0 22 0;
#X connect 11 1 12 0;
#X connect 12 0 20 0;
#X connect 13 0 17 1;
#X connect 14 0 17 1;
#X connect 15 0 18 1;
#X connect 16 0 18 1;
#X connect 17 0 1 0;
#X connect 18 0 4 0;
#X connect 19 0 21 0;
#X connect 20 0 19 0;
#X connect 21 0 26 0;
#X connect 21 1 23 0;
#X connect 22 0 17 0;
#X connect 22 0 18 0;
#X connect 23 0 13 0;
#X connect 23 1 16 0;
#X connect 23 2 25 0;
#X connect 24 0 32 0;
#X connect 25 0 32 0;
#X connect 26 0 14 0;
#X connect 26 1 15 0;
#X connect 26 2 24 0;
#X restore 276 92 pd detect_mrpeach/iemnet;
#N canvas 88 50 846 937 websocket-send 0;
#X obj 22 19 inlet;
#X obj 40 647 list;
#X obj 107 698 list split 1;
#X obj 107 774 route bang;
#X obj 107 750 list;
#X obj 139 822 list append;
#X obj 40 672 route bang;
#X msg 139 798 send \$1;
#X obj 235 889 outlet;
#X obj 107 725 t b f;
#X obj 270 70 list split 1;
#X obj 301 124 list;
#X msg 316 573 send \$1;
#X obj 301 149 route bang;
#X obj 235 600 list prepend;
#N canvas 141 90 546 568 message-length-header 0;
#X obj 35 15 inlet;
#X obj 36 429 list prepend;
#X obj 165 340 list prepend 126;
#X obj 36 139 t l l;
#X obj 105 172 list length;
#X obj 105 200 moses 126;
#X obj 165 273 expr $i1 / 256 \; $i1 % 256;
#X obj 165 312 pack f f;
#X obj 35 65 list split 1;
#X obj 36 113 list;
#X obj 35 90 t b f;
#X obj 36 458 list prepend;
#X obj 36 522 outlet;
#X obj 289 274 expr ($i1 >> 24) % 256 \; ($i1 >> 16) % 256 \; ($i1 >> 8) % 256 \; $i1 % 256 \;;
#X obj 289 340 pack f f f f;
#X obj 289 367 list prepend 127 0 0 0 0;
#X obj 165 247 moses 65536;
#X text 168 229 16bit;
#X text 112 228 8bit;
#X text 291 226 64bit (but pd limit is 20bit);
#X text 174 199 V websocket 'extended payload length' V;
#X connect 0 0 8 0;
#X connect 1 0 11 0;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X connect 3 1 4 0;
#X connect 4 0 5 0;
#X connect 5 0 1 1;
#X connect 5 1 16 0;
#X connect 6 0 7 0;
#X connect 6 1 7 1;
#X connect 7 0 2 0;
#X connect 8 0 10 0;
#X connect 8 1 9 1;
#X connect 9 0 3 0;
#X connect 10 0 9 0;
#X connect 10 1 11 1;
#X connect 11 0 12 0;
#X connect 13 0 14 0;
#X connect 13 1 14 1;
#X connect 13 2 14 2;
#X connect 13 3 14 3;
#X connect 14 0 15 0;
#X connect 15 0 1 1;
#X connect 16 0 6 0;
#X connect 16 1 13 0;
#X restore 368 479 pd message-length-header;
#X obj 270 21 inlet;
#X text 63 20 <- broadcast;
#X text 311 21 <- send to client;
#X obj 22 69 route bang;
#X text 544 480 <- WEBSOCKET DATA LENGTH;
#X obj 40 521 list prepend;
#X msg 198 481 send;
#X msg 121 481 broadcast;
#X obj 40 570 route broadcast send;
#X obj 40 545 list trim;
#X obj 89 98 t a b;
#X obj 270 98 t b b f;
#X obj 368 308 list prepend 129;
#X obj 407 333 list prepend 130;
#X obj 433 197 t b;
#X msg 433 224 specify 'text' or 'binary' before data;
#X obj 433 252 print websocket-server;
#X text 77 642 BROADCAST : send to \; all websockets clients;
#X obj 524 408 list prepend 138;
#X obj 65 624 r websockets-list;
#X obj 40 600 t b a;
#X obj 368 174 list trim;
#X obj 468 23 inlet;
#X obj 468 70 t b;
#X msg 468 197 specify "broadcast' or 'send <socket>';
#X obj 516 140 route float;
#X obj 368 445 t l l;
#X obj 516 117 list split 1;
#X obj 368 283 route text binary close ping pong;
#X obj 446 358 list prepend 136;
#X obj 485 383 list prepend 137;
#X text 606 284 <- message type;
#X msg 483 171 ascii-codes list only (use [list fromsymbol]);
#X connect 0 0 19 0;
#X connect 1 0 6 0;
#X connect 2 0 9 0;
#X connect 2 1 4 1;
#X connect 3 1 2 0;
#X connect 4 0 3 0;
#X connect 5 0 8 0;
#X connect 6 1 2 0;
#X connect 7 0 5 0;
#X connect 9 0 4 0;
#X connect 9 1 7 0;
#X connect 10 0 27 0;
#X connect 10 1 11 1;
#X connect 11 0 13 0;
#X connect 12 0 14 1;
#X connect 13 1 37 0;
#X connect 14 0 8 0;
#X connect 15 0 21 0;
#X connect 16 0 10 0;
#X connect 19 1 26 0;
#X connect 21 0 25 0;
#X connect 22 0 21 1;
#X connect 23 0 21 1;
#X connect 24 0 36 0;
#X connect 24 1 14 0;
#X connect 25 0 24 0;
#X connect 26 0 44 0;
#X connect 26 1 23 0;
#X connect 27 0 11 0;
#X connect 27 1 22 0;
#X connect 27 2 12 0;
#X connect 28 0 42 0;
#X connect 29 0 42 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
#X connect 34 0 42 0;
#X connect 35 0 1 1;
#X connect 36 0 1 0;
#X connect 36 1 5 1;
#X connect 37 0 44 0;
#X connect 38 0 39 0;
#X connect 39 0 40 0;
#X connect 40 0 32 0;
#X connect 41 1 48 0;
#X connect 42 0 15 0;
#X connect 43 0 41 0;
#X connect 44 0 28 0;
#X connect 44 1 29 0;
#X connect 44 2 43 0;
#X connect 44 2 45 0;
#X connect 44 3 43 0;
#X connect 44 3 46 0;
#X connect 44 4 43 0;
#X connect 44 4 34 0;
#X connect 44 5 30 0;
#X connect 45 0 42 0;
#X connect 46 0 42 0;
#X connect 48 0 32 0;
#X restore 28 189 pd websocket-send;
#X text 319 20 connect to tcpserver outlet 1 (data output);
#X text 1087 116 WEBSOCKET-SERVER MAIN WINDOW;
#X text 77 575 <- send to tcpserver inlet;
#N canvas 231 50 474 375 stream-to-list 0;
#X obj 200 164 t b;
#X obj 59 75 route bang float;
#X obj 59 259 list trim;
#X obj 59 23 inlet;
#X obj 59 231 list;
#X obj 84 195 t l l;
#X obj 84 164 list prepend;
#X obj 59 316 outlet;
#X obj 168 105 t a b;
#X text 148 38 Put websocket messages in lists;
#X connect 0 0 4 1;
#X connect 0 0 6 1;
#X connect 1 0 4 0;
#X connect 1 1 6 0;
#X connect 1 2 8 0;
#X connect 2 0 7 0;
#X connect 3 0 1 0;
#X connect 4 0 2 0;
#X connect 5 0 4 1;
#X connect 5 1 6 1;
#X connect 6 0 5 0;
#X connect 8 0 6 0;
#X connect 8 1 0 0;
#X restore 314 485 pd stream-to-list;
#X text 321 506 ^ except this tiny thing \, this is all the exact same websocket-server subpatch than in 2014 original release \, just with some cosmetic object alignements for pd vanilla;
#X connect 0 0 25 0;
#X connect 1 0 10 1;
#X connect 1 0 14 1;
#X connect 1 0 35 2;
#X connect 1 0 17 1;
#X connect 1 0 44 1;
#X connect 2 0 49 0;
#X connect 5 0 6 1;
#X connect 6 0 8 0;
#X connect 7 0 5 1;
#X connect 7 0 6 0;
#X connect 7 1 5 0;
#X connect 8 0 10 0;
#X connect 9 0 7 0;
#X connect 10 0 15 0;
#X connect 12 0 13 0;
#X connect 13 0 48 0;
#X connect 14 0 3 0;
#X connect 15 0 29 0;
#X connect 15 1 14 0;
#X connect 17 0 33 0;
#X connect 17 1 54 0;
#X connect 17 2 26 0;
#X connect 17 3 3 0;
#X connect 18 0 12 0;
#X connect 18 1 33 0;
#X connect 19 0 26 0;
#X connect 25 1 20 0;
#X connect 26 0 27 0;
#X connect 27 0 50 0;
#X connect 27 1 50 1;
#X connect 27 2 35 1;
#X connect 27 3 50 2;
#X connect 29 0 11 0;
#X connect 30 0 29 1;
#X connect 31 0 30 0;
#X connect 32 0 44 2;
#X connect 33 0 16 0;
#X connect 35 0 18 0;
#X connect 35 1 12 1;
#X connect 35 2 33 0;
#X connect 44 0 17 0;
#X connect 44 1 35 0;
#X connect 44 2 33 0;
#X connect 48 0 15 0;
#X connect 49 0 44 0;
#X connect 50 0 33 0;
#X connect 54 0 4 0;
#X restore 130 93 pd websocket-server;
#X obj 260 139 print WEBSOCKETS LIST;
#N canvas 233 50 973 634 HOWTO-SEND 1;
#X obj 467 594 outlet;
#X obj 31 595 outlet;
#X text 78 594 <- nothing here :);
#N canvas 349 229 596 316 html-example 0;
#N canvas 204 100 418 579 html-color 0;
#X msg 111 297 a;
#X msg 141 297 b;
#X msg 170 297 c;
#X msg 199 297 d;
#X msg 228 297 e;
#X obj 111 270 route 10 11 12 13 14 15;
#X msg 257 297 f;
#X obj 111 242 div 16;
#X obj 157 241 mod 16;
#X obj 111 214 t f f;
#X obj 111 368 pack s s;
#X msg 167 342 symbol;
#X msg 111 395 symbol \$1\$2;
#X obj 72 422 symbol;
#X obj 72 25 inlet;
#X obj 72 120 pack f f f;
#X obj 122 25 inlet;
#X obj 122 80 t b f;
#X obj 172 25 inlet;
#X obj 172 80 t b f;
#X obj 95 179 unpack f f f;
#X obj 72 149 t b a b;
#X obj 72 527 outlet;
#X obj 111 342 symbol;
#X obj 294 297 makefilename %d;
#X connect 0 0 23 0;
#X connect 1 0 23 0;
#X connect 2 0 23 0;
#X connect 3 0 23 0;
#X connect 4 0 23 0;
#X connect 5 0 0 0;
#X connect 5 1 1 0;
#X connect 5 2 2 0;
#X connect 5 3 3 0;
#X connect 5 4 4 0;
#X connect 5 5 6 0;
#X connect 5 6 24 0;
#X connect 6 0 23 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 9 0 7 0;
#X connect 9 1 8 0;
#X connect 10 0 12 0;
#X connect 11 0 10 1;
#X connect 12 0 10 1;
#X connect 12 0 13 1;
#X connect 13 0 22 0;
#X connect 14 0 15 0;
#X connect 15 0 21 0;
#X connect 16 0 17 0;
#X connect 17 0 15 0;
#X connect 17 1 15 1;
#X connect 18 0 19 0;
#X connect 19 0 15 0;
#X connect 19 1 15 2;
#X connect 20 0 9 0;
#X connect 20 1 9 0;
#X connect 20 2 9 0;
#X connect 21 0 13 0;
#X connect 21 1 20 0;
#X connect 21 2 11 0;
#X connect 23 0 10 0;
#X connect 24 0 23 0;
#X restore 211 65 pd html-color;
#X msg 112 88 symbol \$1px;
#X msg 199 88 symbol #\$1;
#X obj 102 65 i;
#X obj 167 65 t b s;
#X obj 112 149 pack s s;
#X symbolatom 112 115 10 0 0 0 - - - 0;
#X symbolatom 199 114 10 0 0 0 - - - 0;
#X text 181 149 V send html/css code straight to demo page V;
#X text 141 14 size;
#X text 339 15 colors;
#X msg 112 179 send-html <span style="font-size: \$1 &#59 color: \$2 &#59"> hey! </span>;
#X obj 112 277 outlet;
#X text 3 181 you can change \; text here ---->;
#X text 266 114 font-size and color css-properties with units;
#X obj 102 15 inlet;
#X obj 211 15 inlet;
#X obj 255 15 inlet;
#X obj 299 15 inlet;
#N canvas 617 432 298 323 show-message 0;
#X obj 79 88 list;
#X msg 195 216 set;
#X obj 102 139 list split 1;
#X obj 117 167 list;
#X obj 102 192 t b a;
#X msg 134 216 add2 \$1;
#X obj 79 37 inlet;
#X obj 134 280 outlet;
#X obj 195 174 loadbang;
#X obj 79 111 t b l b;
#X connect 0 0 9 0;
#X connect 1 0 7 0;
#X connect 2 0 4 0;
#X connect 2 1 3 1;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 4 1 5 0;
#X connect 5 0 7 0;
#X connect 6 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 7 0;
#X connect 9 1 2 0;
#X connect 9 2 3 1;
#X connect 9 2 1 0;
#X restore 112 225 pd show-message;
#X obj 312 65 loadbang;
#X obj 312 88 symbol #00ccff;
#X connect 0 0 4 0;
#X connect 1 0 6 0;
#X connect 2 0 7 0;
#X connect 3 0 1 0;
#X connect 4 0 3 0;
#X connect 4 1 2 0;
#X connect 5 0 11 0;
#X connect 6 0 5 0;
#X connect 7 0 5 1;
#X connect 11 0 19 0;
#X connect 15 0 3 0;
#X connect 16 0 0 0;
#X connect 17 0 0 1;
#X connect 18 0 0 2;
#X connect 19 0 12 0;
#X connect 20 0 21 0;
#X connect 21 0 7 0;
#X restore 467 122 pd html-example;
#X text 470 97 size;
#X obj 512 85 nbx 3 14 0 255 0 0 empty gui-html-red empty 0 -8 0 12 #fcc4c4 #000000 #000000 0 256;
#X obj 557 85 nbx 3 14 0 255 0 0 empty gui-html-green empty 0 -8 0 12 #c4fcc4 #000000 #000000 0 204;
#X obj 602 85 nbx 3 14 0 255 0 0 empty gui-html-blue empty 0 -8 0 12 #c4fcfc #000000 #000000 0 256;
#X text 513 96 red;
#X text 556 96 green;
#X text 602 96 blue;
#X obj 491 326 0;
#X obj 520 326 1;
#X obj 467 352 spigot 1;
#X obj 467 376 t l b b;
#X msg 467 178;
#X obj 467 493 list prepend;
#X obj 467 265 list prepend text;
#X msg 365 290 ping;
#X msg 415 290 close;
#X text 464 49 1) SELECT CLIENT (0 for broadcast) ->;
#X text 651 84 <- 2) AND PLAY WITH THESE...;
#X msg 548 466 broadcast;
#N canvas 368 177 840 700 socket-gui 0;
#X obj 370 70 r websockets-list;
#X obj 139 223 list;
#X obj 174 283 unpack f;
#X obj 140 250 list split 0;
#X obj 209 223 - 1;
#X obj 100 168 route 0;
#X obj 139 197 t b f;
#X obj 367 147 list length;
#X msg 367 476 range 0 \$1;
#X obj 100 650 outlet;
#X msg 100 471 broadcast;
#X msg 174 534 send \$1;
#N canvas 1381 547 298 342 show-message 0;
#X obj 79 88 list;
#X msg 182 216 set;
#X obj 98 139 list split 1;
#X obj 111 167 list;
#X obj 98 192 t b a;
#X msg 125 216 add2 \$1;
#X obj 79 37 inlet;
#X obj 125 280 outlet;
#X obj 182 174 loadbang;
#X obj 79 111 t b l b;
#X connect 0 0 9 0;
#X connect 1 0 7 0;
#X connect 2 0 4 0;
#X connect 2 1 3 1;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 4 1 5 0;
#X connect 5 0 7 0;
#X connect 6 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 7 0;
#X connect 9 1 2 0;
#X connect 9 2 3 1;
#X connect 9 2 1 0;
#X restore 100 602 pd show-message;
#X obj 100 100 cnv 15 150 17 empty gui-client-label broadcast 60 9 0 12 #fcfcfc #000000 0;
#X obj 100 100 nbx 4 16 0 0 0 0 s-gui-select-client r-gui-select-client empty 0 -8 0 12 #fcfcfc #000000 #000000 0 256;
#X obj 239 601 s gui-client-label;
#X msg 239 534 label \$1;
#X obj 434 499 loadbang;
#X obj 367 601 s r-gui-select-client;
#X msg 393 534 vis_size 150 17 \, label_pos 60 9 \, label_font 0 12 \, color 0 22;
#X msg 393 556 range 0 0;
#X obj 413 264 i;
#X obj 386 288 <;
#X obj 386 237 t f b;
#X obj 386 344 i;
#X obj 531 226 list split 1;
#X obj 531 194 list;
#X obj 531 263 ==;
#X obj 571 400 list;
#X obj 531 292 select 1 0;
#X obj 531 153 t b f b;
#X obj 367 207 t f f f;
#X obj 663 235 + 1;
#X obj 630 234 i;
#X obj 654 203 1;
#X obj 521 341 i;
#X obj 623 169 t l b;
#X obj 723 275 print;
#X obj 721 244 i;
#X msg 782 210 3;
#X msg 704 170 bang;
#X msg 751 173 1;
#X obj 569 428 route bang;
#X obj 570 460 0;
#X obj 437 442 print TRUC;
#X obj 365 112 t l l l;
#X msg 102 41 set \$1;
#X obj 322 207 0;
#X obj 326 175 select 0;
#X obj 386 315 select 1;
#X obj 109 416 loadbang;
#X text 525 46 don't know how exactly... but it works :);
#X obj 239 507 symbol;
#X msg 239 384 set socket%c\$1;
#X obj 239 411 t b a;
#X msg 239 439 32;
#X obj 239 467 makefilename;
#X connect 0 0 45 0;
#X connect 1 0 3 0;
#X connect 2 0 11 0;
#X connect 2 0 53 0;
#X connect 2 0 24 1;
#X connect 3 1 2 0;
#X connect 4 0 3 1;
#X connect 5 0 10 0;
#X connect 5 1 6 0;
#X connect 6 0 1 0;
#X connect 6 1 4 0;
#X connect 7 0 31 0;
#X connect 8 0 18 0;
#X connect 10 0 12 0;
#X connect 10 0 52 0;
#X connect 11 0 12 0;
#X connect 12 0 9 0;
#X connect 14 0 5 0;
#X connect 16 0 15 0;
#X connect 17 0 19 0;
#X connect 17 0 20 0;
#X connect 19 0 15 0;
#X connect 20 0 18 0;
#X connect 21 0 22 1;
#X connect 22 0 49 0;
#X connect 23 0 21 1;
#X connect 23 0 22 0;
#X connect 23 1 21 0;
#X connect 24 0 30 0;
#X connect 25 0 27 0;
#X connect 25 1 28 1;
#X connect 26 0 25 0;
#X connect 27 0 29 0;
#X connect 28 0 42 0;
#X connect 29 0 35 0;
#X connect 29 1 28 0;
#X connect 30 0 26 0;
#X connect 30 1 27 1;
#X connect 30 2 34 0;
#X connect 31 0 8 0;
#X connect 31 1 23 0;
#X connect 31 2 48 0;
#X connect 32 0 33 1;
#X connect 33 0 32 0;
#X connect 33 0 35 1;
#X connect 34 0 33 0;
#X connect 35 0 46 0;
#X connect 36 0 25 0;
#X connect 36 1 33 0;
#X connect 38 0 37 0;
#X connect 39 0 38 1;
#X connect 40 0 38 0;
#X connect 41 0 38 0;
#X connect 42 0 43 0;
#X connect 42 0 10 0;
#X connect 42 1 36 0;
#X connect 43 0 46 0;
#X connect 45 0 1 1;
#X connect 45 1 7 0;
#X connect 45 2 26 1;
#X connect 46 0 14 0;
#X connect 47 0 46 0;
#X connect 48 0 47 0;
#X connect 48 0 10 0;
#X connect 49 0 24 0;
#X connect 50 0 10 0;
#X connect 52 0 16 0;
#X connect 53 0 54 0;
#X connect 54 0 55 0;
#X connect 54 1 56 0;
#X connect 55 0 56 0;
#X connect 56 0 52 0;
#X coords 0 -1 1 1 150 16 1 100 100;
#X restore 708 50 pd socket-gui;
#X text 471 157 resulting pd message (see 'send-html' in demo html code);
#X text 620 466 <- specify 'send <socket-number' or broadcast;
#X text 558 493 <- and put it before <type> <data>;
#X text 568 231 <- convert to ascii-codes for <DATA>;
#X text 601 264 <- put <TYPE> before <data>;
#X obj 467 85 nbx 3 14 0 1e+37 0 0 empty empty empty 0 -8 0 12 #fcfcfc #000000 #000000 0 256;
#X obj 490 401 delay 30;
#X text 516 593 <- to [pd websocket-server] inlet;
#X text 553 400 (<- add more delay if needed \, when send-buffer struggles);
#X text 464 16 EXAMPLE : SEND HTML CONTENT (works with 'Flames' demo);
#X text 530 365 get new message to send every 30ms to prevent overflow \; (especially when 'flames" broadcast its waveform array);
#X text 28 46 send to specified (web)socket;
#X msg 31 68 send <socket-number> <type> (<data in ascii-codes>);
#X msg 31 118 broadcast <type> (<data in ascii-codes>);
#X text 29 427 internal webserver message (optional) :;
#X text 28 262 other types 'ping' \, "pong' or 'close' (with or without data) can be used as low-level websockets messages :;
#X text 28 97 broadcast : send to every connected websocket clients;
#X obj 31 392 value bufferlength;
#X text 164 391 <- if = 0 \, 'send-buffer' is empty;
#X msg 32 449 webpage <data in ascii-codes>;
#X text 28 331 to avoid flooding the 'send-buffer' \, you can do like this-->;
#X text 28 345 for spacing messages in time \, or alternatively \, check the following value to get total size of remaining messages to be sent currently present in the buffer (see 'flames' demo):;
#X text 27 301 (you can select target client(s) with EXAMPLE);
#N canvas 336 70 344 534 list2ascii 0;
#X obj 125 267 list fromsymbol;
#X obj 125 181 list split 1;
#X obj 125 123 until;
#X obj 125 152 list append;
#X obj 229 181 bang;
#X obj 125 94 t b a;
#X obj 102 65 t b a b;
#X obj 125 296 list prepend 32;
#X obj 125 350 t l l;
#X obj 125 323 list prepend;
#X obj 102 382 list;
#X obj 229 323 t b;
#X obj 102 412 list split 1;
#X obj 142 439 list trim;
#X obj 125 238 makefilename %d;
#X obj 125 210 route float;
#X obj 102 18 inlet;
#X obj 142 489 outlet;
#X connect 0 0 7 0;
#X connect 1 0 15 0;
#X connect 1 1 3 1;
#X connect 1 2 4 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 2 1;
#X connect 5 0 2 0;
#X connect 5 1 3 1;
#X connect 6 0 10 0;
#X connect 6 1 5 0;
#X connect 6 2 11 0;
#X connect 7 0 9 0;
#X connect 8 0 10 1;
#X connect 8 1 9 1;
#X connect 9 0 8 0;
#X connect 10 0 12 0;
#X connect 11 0 9 1;
#X connect 11 0 10 1;
#X connect 12 1 13 0;
#X connect 13 0 17 0;
#X connect 14 0 0 0;
#X connect 15 0 14 0;
#X connect 15 1 0 0;
#X connect 16 0 6 0;
#X restore 467 231 pd list2ascii;
#X text 26 16 SEND WEBSOCKET MESSAGES THROUGH [pd websocket-server] INLET;
#X text 570 139 3) LOOK BELOW TO SEE HOW MESSAGES ARE SENT AS LISTS :;
#X text 28 147 <type> : 'text' or 'binary' followed by message data as an ascii-codes list (pd's [list fromsymbol] or any dedicated externals can be used for that) \; these data types are handled differenty with websocket's javascript (see demo html code);
#X text 29 219 note: special characters must be encoded as 'utf-8' bytes (and can be converted to/from symbols with [list] object);
#X text 27 530 however \, this is neither required nor recommended at all \, and you should use this patch for websockets communications only \, with webpages hosted on any proper webserver;
#X text 28 470 this message can be used to load a single html webpage (which doesn't rely on any external content \, like images and script files) into the minimalistic and crude included http webserver (on same port than websocket-server);
#X listbox 508 183 20 0 0 0 - - - 0;
#X connect 3 0 15 0;
#X connect 5 0 3 1;
#X connect 6 0 3 2;
#X connect 7 0 3 3;
#X connect 11 0 13 1;
#X connect 12 0 13 1;
#X connect 13 0 14 0;
#X connect 14 0 16 0;
#X connect 14 1 30 0;
#X connect 14 2 11 0;
#X connect 15 0 47 0;
#X connect 16 0 0 0;
#X connect 17 0 13 0;
#X connect 18 0 16 0;
#X connect 19 0 16 0;
#X connect 22 0 16 1;
#X connect 23 0 22 0;
#X connect 29 0 3 0;
#X connect 30 0 12 0;
#X connect 47 0 17 0;
#X connect 54 0 47 0;
#X restore 42 49 pd HOWTO-SEND;
#N canvas 248 25 523 847 README/MORE_INFO 0;
#X text 40 1230 - iemnet-tcpserver could stop working and make pd hang for different reasons (sometimes requiring a system reboot...);
#X text 40 1484 - incoming messages decoding is very CPU intensive \, pd will hang with very long messages;
#X text 40 1522 - bandwith is quite limited and will decrease dramatically with multiple connections (possibly 'tcpserver' related);
#X text 40 1360 - broadcast will result in multiple copies of the same message in send-buffer \, sent one after the other every 10ms (1ms when [iemnet/tcpserver] is used instead of mrpeach's external) \, increasing latency as client number grows.;
#X text 40 1298 - tcpserver externals have problems with high message rate So a 'send buffer' is used as a work-around \, concatenating all awaiting messages into a single pd list and sending each one every 10ms (or 1ms when iemnet/tcpserver is used);
#X text 40 1099 - Pd will easily lag \, or even freeze (in that case you'll have to 'kill' pd/wish8.5 manually) and more likely when stressing the server;
#X text 40 1206 - included webserver is crude but you could use your own;
#X text 40 1039 You could face many problems and limitations :;
#X text 40 1064 - it requires a fast CPU and could be instable or function abnormally on some systems and network interfaces;
#X text 41 1144 - server may malfunction or crash when running on wifi interface (with bad drivers) or when some network traffic peak occurs on server's system. Try to connect server through ethernet interface and avoid other network activity;
#X floatatom 48 1602 5 0 20 0 - - - 0;
#X obj 48 1628 s add_sending_delay;
#X text 45 1562 - if you experience instant or frequent disconnections \, please try to (slightly) increase this value first:;
#X text 38 17 ABOUT;
#X text 38 359 LICENSE;
#X text 39 509 USE IEMNET [TCPSERVER] EXTERNAL FOR BETTER PERFORMANCES;
#N canvas 253 270 430 309 fromInt32Array 0;
#X obj 34 21 inlet;
#X obj 34 250 outlet;
#X obj 34 64 t b l;
#X obj 66 123 expr $i1|($i2<<8)|($i3<<16)|($i4<<24);
#N canvas 717 270 380 300 repack4 0;
#X obj 134 164 list;
#X obj 134 135 until;
#X obj 134 108 list length;
#X obj 134 77 t l l;
#X obj 134 194 list split 4;
#X obj 134 237 outlet;
#X obj 134 36 inlet;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 3 1 0 1;
#X connect 4 0 5 0;
#X connect 4 1 0 1;
#X connect 6 0 3 0;
#X restore 66 93 pd repack4;
#X obj 66 154 list prepend;
#X obj 66 181 t l l;
#X obj 34 207 list;
#X obj 34 154 t b;
#X connect 0 0 2 0;
#X connect 2 0 8 0;
#X connect 2 1 4 0;
#X connect 3 0 5 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 7 1;
#X connect 6 1 5 1;
#X connect 7 0 1 0;
#X connect 8 0 7 0;
#X connect 8 0 5 1;
#X restore 44 833 pd fromInt32Array;
#N canvas 242 287 485 453 fromFloat32Array 0;
#X obj 34 21 inlet;
#X obj 34 409 outlet;
#X obj 34 64 t b l;
#X obj 66 123 expr ((-2*($i4>>7))+1)*pow(2 \, (((($i4%128)<<1)+($i3>>7))-127))*(1+(($i3>>6)%2)*pow(2 \, -1)+(($i3>>5)%2)*pow(2 \, -2)+(($i3>>4)%2)*pow(2 \, -3)+(($i3>>3)%2)*pow(2 \, -4)+(($i3>>2)%2)*pow(2 \, -5)+(($i3>>1)%2)*pow(2 \, -6)+($i3%2)*pow(2 \, -7)+(($i2>>7)%2)*pow(2 \, -8)+(($i2>>6)%2)*pow(2 \, -9)+(($i2>>5)%2)*pow(2 \, -10)+(($i2>>4)%2)*pow(2 \, -11)+(($i2>>3)%2)*pow(2 \, -12)+(($i2>>2)%2)*pow(2 \, -13)+(($i2>>1)%2)*pow(2 \, -14)+($i2%2)*pow(2 \, -15)+(($i1>>7)%2)*pow(2 \, -16)+(($i1>>6)%2)*pow(2 \, -17)+(($i1>>5)%2)*pow(2 \, -18)+(($i1>>4)%2)*pow(2 \, -19)+(($i1>>3)%2)*pow(2 \, -20)+(($i1>>2)%2)*pow(2 \, -21)+(($i1>>1)%2)*pow(2 \, -22)+($i1%2)*pow(2 \, -23));
#X text 167 92 warning : precision may suffer :);
#N canvas 756 289 380 300 repack4 0;
#X obj 134 164 list;
#X obj 134 135 until;
#X obj 134 108 list length;
#X obj 134 77 t l l;
#X obj 134 194 list split 4;
#X obj 134 237 outlet;
#X obj 134 36 inlet;
#X connect 0 0 4 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 3 1 0 1;
#X connect 4 0 5 0;
#X connect 4 1 0 1;
#X connect 6 0 3 0;
#X restore 66 93 pd repack4;
#X obj 66 309 list prepend;
#X obj 66 336 t l l;
#X obj 34 362 list;
#X obj 34 309 t b;
#X connect 0 0 2 0;
#X connect 2 0 9 0;
#X connect 2 1 5 0;
#X connect 3 0 6 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 7 0 8 1;
#X connect 7 1 6 1;
#X connect 8 0 1 0;
#X connect 9 0 8 0;
#X connect 9 0 6 1;
#X restore 43 876 pd fromFloat32Array;
#N canvas 260 193 401 506 toInt32Array 0;
#X obj 78 329 pack f f f f;
#X obj 46 17 inlet;
#X obj 46 69 t b l;
#X obj 46 461 outlet;
#X obj 78 222 mod 256;
#X obj 111 246 mod 256;
#X obj 144 270 mod 256;
#X obj 177 293 mod 256;
#X obj 78 127 int;
#X obj 78 157 expr ($i1 % 256) \; (($i1>>8)%256) \; (($i1>>16)%256) \; (($i1>>24)%256);
#N canvas 628 242 380 300 repack1 0;
#X obj 134 164 list;
#X obj 134 135 until;
#X obj 134 108 list length;
#X obj 134 77 t l l;
#X obj 134 237 outlet;
#X obj 134 36 inlet;
#X obj 134 194 list split 1;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 3 1 0 1;
#X connect 5 0 3 0;
#X connect 6 0 4 0;
#X connect 6 1 0 1;
#X restore 78 98 pd repack1;
#X obj 78 357 list prepend;
#X obj 78 384 t l l;
#X obj 46 410 list;
#X obj 46 357 t b;
#X connect 0 0 11 0;
#X connect 1 0 2 0;
#X connect 2 0 14 0;
#X connect 2 1 10 0;
#X connect 4 0 0 0;
#X connect 5 0 0 1;
#X connect 6 0 0 2;
#X connect 7 0 0 3;
#X connect 8 0 9 0;
#X connect 9 0 4 0;
#X connect 9 1 5 0;
#X connect 9 2 6 0;
#X connect 9 3 7 0;
#X connect 10 0 8 0;
#X connect 11 0 12 0;
#X connect 12 0 13 1;
#X connect 12 1 11 1;
#X connect 13 0 3 0;
#X connect 14 0 13 0;
#X connect 14 0 11 1;
#X restore 44 792 pd toInt32Array;
#X text 41 900 Warning :since Pd stores any number as 32bit floats internally \, Pd integers precision is limited to 23 bits;
#X text 42 774 Pd integers to binary '32bit signed integers' (to send):;
#X text 39 814 (received) binary '32bit signed integers' to Pd integer:;
#X text 39 857 (received) binary '32bit float numbers' to Pd floats:;
#X text 41 1264 - you could overload pd have problems when too much messages are received in a short timeframe;
#X text 38 379 This program is released under Creative Commons Attribution- NonCommercial-ShareAlike 4 International (CC BY-NC-SA 4.0) license \, please consult its full text version via : https://creativecommons.org/licenses/by/4.0/deed.en You may not use the material for commercial purposes \, that is \, intended for any commercial advantage or monetary compensation \, including publicly funded artistical \, educational or promotional activities. Please respect it.;
#X text 38 40 [pd wesocket-server] is a 'pure vanilla' abstraction only requiring [tcpserver] external to access network \, and is meant as an easy way to experiment with Pure Data <-> web-browsers communications through websockets \, without the need of other software or any external to compile.;
#X text 37 117 This patch includes the multi-touch and multi-player 'flames' demo webapp (with fully commented websocket's javascript code) which makes creepy sounds (sorry...) and is as well used for an example in [pd HOWTO-SEND].;
#X text 38 532 Iemnet version of the [tcpserver] external is recommended to get 10 times more throughput (and 10X less latency with multiple connections). It's issues with Windows 8+ at the time of original patch release prevented it to be the default choice \, but it looks like this has been fixed now in more recent builds (try the latest git version via deken).;
#X text 38 626 No additionnal change is needed : once the iemnet library is installed \, just replace 'mrpeach' by 'iemnet' in [tcpserver] object's name and the patch will autodetect it at first connection and adapt its internal operations accordingly.;
#X text 40 957 TECHNICAL DETAILS ON BUGS AND LIMITATIONS;
#X text 39 705 BINARY WEBSOCKET MESSAGES;
#X text 41 729 Binary messages are adapted to transmissions of arrays of numerical data (see Websocket Javascript API documentation). Advanced users can use these converters at their own risks :;
#X text 40 1424 - this buffer mechanism based on [list] objects will have difficulties to handle long messages at high rate \, thus outgoing messages longer than a couple hundred bytes should be avoided at maximum rate;
#X text 38 182 It is intended for Pd-0.46+ on Windows \, Mac and Linux. Compatible web browsers are desktop and mobile versions of Firefox 11+ \, Chrome 16+ \, Safari 6+ \, Internet Explorer 10+ and any other with WebSockets RFC 6455 (final draft) support;
#X text 39 297 Feel free to contact me about all this at nlhommet@gmail.com or on SourceForge dedicated forum \, and I'd be glad to hear about any works based on it \, so please let me know.;
#X text 39 988 This websocket-server is experimental and barely suitable (although somewhat possible) for audio/video streaming and any high rate or bandwidth consuming communications.;
#X text 38 246 Just make sure to install mrpeach library (via Help->Find Externals menu) and that your firewall doesn't block Pd network access or server port specified in [tcpserver].;
#X connect 10 0 11 0;
#X restore 556 206 pd README/MORE_INFO;
#X text 291 262 <- (optional) ascii to pd messages translation;
#X text 523 156 Websocket Server in a Patch \; by Nicolas Lhommet;
#X text 320 36 connect any browser to http://localhost:9998 on same machine (<- you can specify another port here) and from any computer or device on same LAN using http://<SERVER-LAN-IP>:<PORT>;
#X text 18 93 100% vanilla ->;
#X text 319 92 Only library required (for [tcpserver] external): mrpeach (iemnet version can be used instead \, see README subpatch);
#N canvas 249 50 943 942 text2pdmessage 0;
#X obj 95 210 list split 1;
#X obj 95 182 list;
#X obj 265 284 t b b;
#X obj 221 284 t b b;
#X msg 303 452 addsemi;
#X msg 196 452 bang;
#X msg 236 452 addcomma;
#X obj 28 69 route bang;
#X obj 95 126 t b l b;
#X obj 163 284 t b b b;
#X obj 28 19 inlet;
#X obj 395 395 t l l;
#X obj 395 367 list prepend;
#X obj 335 283 select 32;
#X obj 367 422 list;
#X obj 367 451 route bang;
#X obj 335 330 t b b;
#X obj 515 565 list tosymbol;
#X obj 515 591 list prepend add2;
#X obj 515 618 list trim;
#X obj 434 538 route number;
#X obj 663 417 moses 58;
#X obj 610 393 moses 48;
#X obj 434 481 list prepend;
#X msg 515 451 number;
#X obj 610 451 t b;
#X obj 695 638 f;
#X obj 663 615 t f b;
#X obj 695 664 * 10;
#X obj 663 688 +;
#X obj 663 591 - 48;
#X obj 645 715 f;
#X msg 713 615 0;
#X obj 663 528 spigot 0;
#X msg 716 501 1;
#X msg 750 501 0;
#X obj 434 571 t b;
#X msg 645 797 add2 \$1;
#X obj 813 199 t b;
#X obj 434 510 list trim;
#X msg 515 845;
#X msg 163 452 set;
#X obj 95 154 until;
#X obj 95 98 list append -1;
#X obj 95 238 select 44 59 -1;
#X msg 578 316 45;
#X obj 508 340 select;
#X obj 645 769 *;
#X msg 714 742 1;
#X msg 682 742 -1;
#X msg 547 316 -1;
#X obj 761 690 pow;
#X msg 761 665 10;
#X obj 761 640 t b f;
#X obj 761 615 i;
#X obj 571 365 select;
#X msg 610 333 -1;
#X msg 643 333 46;
#X obj 663 560 t f b;
#X obj 795 615 +;
#X msg 779 588 -1;
#X obj 645 742 *;
#X msg 813 588 0;
#X obj 424 900 outlet;
#X text 484 40 (VANILLA) TEXT CODES TO PD MESSAGES CONVERSION;
#X text 483 75 -signed floats parsed as numbers (except exponent notation) -commas and semicolons supported ('send' type pd messages with semicolons work the way they should \, without output);
#X connect 0 0 44 0;
#X connect 0 1 1 1;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 2 1 16 0;
#X connect 3 0 6 0;
#X connect 3 1 16 0;
#X connect 4 0 40 0;
#X connect 5 0 40 0;
#X connect 6 0 40 0;
#X connect 7 1 43 0;
#X connect 8 0 42 0;
#X connect 8 1 1 1;
#X connect 8 2 38 0;
#X connect 8 2 41 0;
#X connect 9 0 41 0;
#X connect 9 1 5 0;
#X connect 9 2 42 1;
#X connect 9 2 16 0;
#X connect 10 0 7 0;
#X connect 11 0 14 1;
#X connect 11 1 12 1;
#X connect 12 0 11 0;
#X connect 13 0 16 0;
#X connect 13 1 12 0;
#X connect 13 1 46 0;
#X connect 14 0 15 0;
#X connect 15 1 23 0;
#X connect 16 0 12 1;
#X connect 16 0 14 1;
#X connect 16 1 14 0;
#X connect 16 1 38 0;
#X connect 17 0 18 0;
#X connect 18 0 19 0;
#X connect 19 0 40 0;
#X connect 20 0 36 0;
#X connect 20 1 17 0;
#X connect 21 0 33 0;
#X connect 21 1 25 0;
#X connect 22 0 25 0;
#X connect 22 1 21 0;
#X connect 23 0 39 0;
#X connect 24 0 23 1;
#X connect 25 0 23 1;
#X connect 25 0 35 0;
#X connect 26 0 28 0;
#X connect 27 0 29 0;
#X connect 27 1 26 0;
#X connect 28 0 29 1;
#X connect 29 0 26 1;
#X connect 29 0 31 1;
#X connect 30 0 27 0;
#X connect 31 0 61 0;
#X connect 32 0 26 1;
#X connect 33 0 58 0;
#X connect 34 0 33 1;
#X connect 35 0 33 1;
#X connect 36 0 31 0;
#X connect 37 0 40 0;
#X connect 38 0 24 0;
#X connect 38 0 34 0;
#X connect 38 0 32 0;
#X connect 38 0 45 0;
#X connect 38 0 48 0;
#X connect 38 0 62 0;
#X connect 38 0 57 0;
#X connect 39 0 20 0;
#X connect 40 0 63 0;
#X connect 41 0 40 0;
#X connect 42 0 1 0;
#X connect 43 0 8 0;
#X connect 44 0 3 0;
#X connect 44 1 2 0;
#X connect 44 2 9 0;
#X connect 44 3 13 0;
#X connect 45 0 46 1;
#X connect 46 0 50 0;
#X connect 46 0 49 0;
#X connect 46 1 55 0;
#X connect 47 0 37 0;
#X connect 48 0 47 1;
#X connect 49 0 47 1;
#X connect 50 0 46 1;
#X connect 51 0 61 1;
#X connect 52 0 51 0;
#X connect 53 0 52 0;
#X connect 53 1 51 1;
#X connect 54 0 59 0;
#X connect 54 0 53 0;
#X connect 55 0 56 0;
#X connect 55 0 50 0;
#X connect 55 0 60 0;
#X connect 55 1 22 0;
#X connect 56 0 55 1;
#X connect 57 0 55 1;
#X connect 58 0 30 0;
#X connect 58 1 54 0;
#X connect 58 1 50 0;
#X connect 59 0 54 1;
#X connect 60 0 59 1;
#X connect 60 0 54 1;
#X connect 61 0 47 0;
#X connect 62 0 59 1;
#X connect 62 0 54 1;
#X restore 162 261 pd text2pdmessage;
#X obj 162 49 mrpeach/tcpserver 9001;
#X obj 162 318 print receivedMessage;
#X connect 1 0 15 0;
#X connect 6 0 16 0;
#X connect 6 1 1 0;
#X connect 6 2 0 0;
#X connect 6 3 2 0;
#X connect 6 4 7 0;
#X connect 8 1 6 0;
#X connect 15 0 17 0;
#X connect 16 0 6 1;
#X connect 16 1 6 2;
#X connect 16 2 6 3;
#X connect 16 4 6 4;
