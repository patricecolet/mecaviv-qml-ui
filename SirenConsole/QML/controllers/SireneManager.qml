import QtQuick 2.15

QtObject {
    id: sireneManager
    
    // === PROPRI√âT√âS ===
    
    // Mapping des sir√®nes : {sireneId: pupitreId}
    property var sireneOwnership: ({})
    
    // Sir√®nes utilis√©es par le s√©quenceur externe
    property var sequencerSireneList: []
    
    // Sir√®nes disponibles pour les pupitres
    property var availableSireneList: []
    
    // === SIGNALS ===
    
    signal ownershipChanged(string sireneId, string oldPupitreId, string newPupitreId)
    signal sequencerChanged(var sireneList)
    signal errorOccurred(string error)
    
    // === INITIALISATION ===
    
    Component.onCompleted: {
        console.log("üé∫ SireneManager initialis√©")
        initializeAvailableSirenes()
    }
    
    function initializeAvailableSirenes() {
        // Initialiser la liste des sir√®nes disponibles (S1 √† S7)
        availableSireneList = []
        for (var i = 1; i <= 7; i++) {
            availableSireneList.push(i)
        }
        console.log("üé∫ Sir√®nes disponibles:", availableSireneList)
    }
    
    // === GESTION DE LA PROPRI√âT√â DES SIR√àNES ===
    
    // V√©rifier si une sir√®ne peut √™tre assign√©e √† un pupitre
    function canAssignSirene(sireneId, pupitreId) {
        // V√©rifier si la sir√®ne est utilis√©e par le s√©quenceur
        if (sequencerSireneList.indexOf(sireneId) !== -1) {
            console.log("üö´ Sir√®ne", sireneId, "utilis√©e par le s√©quenceur")
            return false
        }
        
        // V√©rifier si la sir√®ne est d√©j√† assign√©e √† un autre pupitre
        var currentOwner = sireneOwnership[sireneId]
        if (currentOwner && currentOwner !== pupitreId) {
            console.log("üö´ Sir√®ne", sireneId, "d√©j√† assign√©e √† pupitre", currentOwner)
            return false
        }
        
        return true
    }
    
    // Assigner une sir√®ne √† un pupitre
    function assignSirene(sireneId, pupitreId) {
        if (!canAssignSirene(sireneId, pupitreId)) {
            errorOccurred("Impossible d'assigner la sir√®ne " + sireneId + " au pupitre " + pupitreId)
            return false
        }
        
        var oldOwner = sireneOwnership[sireneId]
        sireneOwnership[sireneId] = pupitreId
        
        console.log("‚úÖ Sir√®ne", sireneId, "assign√©e au pupitre", pupitreId)
        ownershipChanged(sireneId, oldOwner, pupitreId)
        
        return true
    }
    
    // D√©sassigner une sir√®ne d'un pupitre
    function unassignSirene(sireneId, pupitreId) {
        var currentOwner = sireneOwnership[sireneId]
        if (currentOwner === pupitreId) {
            delete sireneOwnership[sireneId]
            console.log("‚ùå Sir√®ne", sireneId, "d√©sassign√©e du pupitre", pupitreId)
            ownershipChanged(sireneId, pupitreId, "")
            return true
        }
        return false
    }
    
    // Obtenir le propri√©taire actuel d'une sir√®ne
    function getSireneOwner(sireneId) {
        return sireneOwnership[sireneId] || ""
    }
    
    // Obtenir toutes les sir√®nes assign√©es √† un pupitre
    function getPupitreSirenes(pupitreId) {
        var assignedSirenes = []
        for (var sireneId in sireneOwnership) {
            if (sireneOwnership[sireneId] === pupitreId) {
                assignedSirenes.push(parseInt(sireneId))
            }
        }
        return assignedSirenes.sort()
    }
    
    // === GESTION DU S√âQUENCEUR EXTERNE ===
    
    // D√©finir les sir√®nes utilis√©es par le s√©quenceur
    function setSequencerSirenes(sirenes) {
        sequencerSireneList = sirenes || []
        console.log("üéµ Sir√®nes du s√©quenceur:", sequencerSireneList)
        sequencerChanged(sequencerSireneList)
        
        // V√©rifier les conflits avec les pupitres
        checkConflictsWithSequencer()
    }
    
    // V√©rifier les conflits avec le s√©quenceur
    function checkConflictsWithSequencer() {
        for (var i = 0; i < sequencerSireneList.length; i++) {
            var sireneId = sequencerSireneList[i]
            var owner = getSireneOwner(sireneId)
            if (owner) {
                console.log("‚ö†Ô∏è Conflit d√©tect√©: Sir√®ne", sireneId, "utilis√©e par pupitre", owner, "et s√©quenceur")
                // D√©sassigner automatiquement du pupitre
                unassignSirene(sireneId, owner)
            }
        }
    }
    
    // === √âTAT DES SIR√àNES ===
    
    // Obtenir l'√©tat d'une sir√®ne (available, assigned, sequencer)
    function getSireneStatus(sireneId) {
        if (sequencerSireneList.indexOf(sireneId) !== -1) {
            return "sequencer"
        }
        if (sireneOwnership[sireneId]) {
            return "assigned"
        }
        return "available"
    }
    
    // Obtenir la couleur d'affichage pour une sir√®ne
    function getSireneColor(sireneId) {
        var status = getSireneStatus(sireneId)
        switch (status) {
            case "sequencer": return "#ff4444" // Rouge pour s√©quenceur
            case "assigned": return "#4a90e2"  // Bleu pour assign√©e
            default: return "#666666"          // Gris pour disponible
        }
    }
    
    // === SYNCHRONISATION AVEC LES PUPITRES ===
    
    // Synchroniser les sir√®nes assign√©es avec un pupitre
    function syncPupitreSirenes(pupitreId, requestedSirenes) {
        var currentSirenes = getPupitreSirenes(pupitreId)
        
        // D√©sassigner les sir√®nes qui ne sont plus demand√©es
        for (var i = 0; i < currentSirenes.length; i++) {
            var sireneId = currentSirenes[i]
            if (requestedSirenes.indexOf(sireneId) === -1) {
                unassignSirene(sireneId, pupitreId)
            }
        }
        
        // Assigner les nouvelles sir√®nes
        for (var j = 0; j < requestedSirenes.length; j++) {
            var newSireneId = requestedSirenes[j]
            if (currentSirenes.indexOf(newSireneId) === -1) {
                if (!assignSirene(newSireneId, pupitreId)) {
                    console.log("‚ö†Ô∏è Impossible d'assigner la sir√®ne", newSireneId, "au pupitre", pupitreId)
                }
            }
        }
        
        return getPupitreSirenes(pupitreId)
    }
}
