#!/bin/bash

# Script de build pour un projet sp√©cifique
# Usage: ./build-project.sh <project>
# Projects: sirenepupitre, sirenconsole, pedalier, router

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Configuration Qt WebAssembly
QT_CMAKE="$HOME/Qt/6.10.0/wasm_singlethread/bin/qt-cmake"

# V√©rifier l'argument
if [ $# -eq 0 ]; then
    echo "Usage: $0 <project>"
    echo "Projects disponibles:"
    echo "  - sirenepupitre    : SirenePupitre (Visualiseur musical)"
    echo "  - sirenconsole     : SirenConsole (Console de contr√¥le)"
    echo "  - pedalier         : pedalierSirenium (Interface p√©dalier 3D)"
    echo "  - router           : sirenRouter (Service monitoring Node.js)"
    exit 1
fi

PROJECT=$1

# Fonction de build Qt/QML pour WebAssembly
build_qt_project() {
    local project_name=$1
    local project_dir=$2
    
    echo "üî® Build de $project_name en WebAssembly..."
    
    cd "$project_dir"
    
    # Cr√©er le dossier build s'il n'existe pas
    mkdir -p build
    cd build
    
    # CMake avec Qt WebAssembly
    echo "‚öôÔ∏è  Configuration CMake..."
    "$QT_CMAKE" ..
    
    # Build
    echo "üîß Compilation..."
    make -j$(sysctl -n hw.ncpu)
    
    # Copier les fichiers vers webfiles
    echo "üì¶ Copie vers webfiles..."
    if [ -f "app${project_name}.html" ]; then
        cp app${project_name}.html ../webfiles/
        cp app${project_name}.js ../webfiles/
        cp app${project_name}.wasm ../webfiles/ 2>/dev/null || true
    elif [ -f "${project_name}.html" ]; then
        cp ${project_name}.html ../webfiles/
        cp ${project_name}.js ../webfiles/
        cp ${project_name}.wasm ../webfiles/ 2>/dev/null || true
    fi
    
    echo "‚úÖ Build de $project_name termin√©"
}

# Fonction de build pour pedalierSirenium (structure diff√©rente)
build_pedalier() {
    local project_dir="$ROOT_DIR/pedalierSirenium/QtFiles"
    
    echo "üî® Build de pedalierSirenium en WebAssembly..."
    
    cd "$project_dir"
    
    # Cr√©er le dossier build s'il n'existe pas
    mkdir -p build
    cd build
    
    # CMake avec Qt WebAssembly
    echo "‚öôÔ∏è  Configuration CMake..."
    "$QT_CMAKE" ..
    
    # Build
    echo "üîß Compilation..."
    make -j$(sysctl -n hw.ncpu)
    
    # Copier les fichiers vers webfiles
    echo "üì¶ Copie vers webfiles..."
    cp qmlwebsocketserver.html "$ROOT_DIR/pedalierSirenium/webfiles/" 2>/dev/null || true
    cp qmlwebsocketserver.js "$ROOT_DIR/pedalierSirenium/webfiles/" 2>/dev/null || true
    cp qmlwebsocketserver.wasm "$ROOT_DIR/pedalierSirenium/webfiles/" 2>/dev/null || true
    
    echo "‚úÖ Build de pedalierSirenium termin√©"
}

# Build selon le projet
case $PROJECT in
    sirenepupitre)
        build_qt_project "SirenePupitre" "$ROOT_DIR/SirenePupitre"
        ;;
    
    sirenconsole)
        build_qt_project "SirenConsole" "$ROOT_DIR/SirenConsole"
        ;;
    
    pedalier)
        build_pedalier
        ;;
    
    router)
        echo "üì¶ Installation des d√©pendances de sirenRouter..."
        cd "$ROOT_DIR/sirenRouter"
        if [ -f "package.json" ]; then
            npm install
            echo "‚úÖ sirenRouter pr√™t"
        else
            echo "‚ö†Ô∏è  Pas de package.json trouv√©, cr√©ation basique..."
            # Cr√©er un package.json minimal si n√©cessaire
            echo "{
  \"name\": \"siren-router\",
  \"version\": \"1.0.0\",
  \"description\": \"Service de monitoring pour sir√®nes\",
  \"main\": \"src/server.js\",
  \"scripts\": {
    \"start\": \"node src/server.js\"
  }
}" > package.json
            npm install express ws
            echo "‚úÖ sirenRouter initialis√©"
        fi
        ;;
    
    *)
        echo "‚ùå Projet inconnu: $PROJECT"
        echo "Projects disponibles: sirenepupitre, sirenconsole, pedalier, router"
        exit 1
        ;;
esac

