#!/bin/bash

# Script de d√©veloppement avec logs du navigateur pour SirenePupitre
# Usage: ./scripts/dev-with-logs.sh [build|serve|both]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction d'aide
show_help() {
    echo "Script de d√©veloppement avec logs du navigateur pour SirenePupitre"
    echo ""
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  build       Build WebAssembly uniquement"
    echo "  serve       D√©marrer le serveur + navigateur avec logs"
    echo "  both        Build + Serveur + Navigateur (d√©faut)"
    echo "  kill        Tuer tous les serveurs"
    echo "  help        Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 build"
    echo "  $0 serve"
    echo "  $0 both"
    echo "  $0 kill"
}

# Fonction pour tuer les serveurs
kill_servers() {
    print_info "üõë Arr√™t des serveurs existants..."
    
    # Trouver tous les processus node server.js
    PIDS=$(ps aux | grep "node server.js" | grep -v grep | awk '{print $2}')
    
    if [ -z "$PIDS" ]; then
        print_warning "Aucun serveur Node.js trouv√©"
    else
        print_info "Processus trouv√©s: $PIDS"
        
        for PID in $PIDS; do
            print_info "Arr√™t du processus $PID..."
            kill $PID 2>/dev/null || print_warning "Impossible d'arr√™ter le processus $PID"
        done
        
        # Attendre un peu pour que les processus se terminent
        sleep 1
        
        # V√©rifier s'il reste des processus
        REMAINING=$(ps aux | grep "node server.js" | grep -v grep | awk '{print $2}')
        if [ -n "$REMAINING" ]; then
            print_warning "For√ßage de l'arr√™t des processus restants: $REMAINING"
            for PID in $REMAINING; do
                kill -9 $PID 2>/dev/null || true
            done
        fi
        
        print_success "Tous les serveurs Node.js arr√™t√©s"
    fi
}

# Fonction pour build
build_app() {
    print_info "üî® Build WebAssembly..."
    ./scripts/build.sh web
    print_success "‚úÖ Build termin√©"
}

# Fonction pour serveur + navigateur avec logs
start_server_with_browser() {
    print_info "üöÄ D√©marrage du serveur..."
    
    # D√©marrer le serveur en arri√®re-plan
    ./scripts/start-server.sh &
    SERVER_PID=$!
    
    # Attendre que le serveur d√©marre
    print_info "‚è≥ Attente du d√©marrage du serveur..."
    sleep 3
    
    # V√©rifier que le serveur r√©pond
    if curl -s http://localhost:8000 >/dev/null; then
        print_success "‚úÖ Serveur d√©marr√© sur http://localhost:8000"
        
        # Ouvrir le navigateur avec les logs
        print_info "üåê Ouverture du navigateur avec logs..."
        
        # D√©tecter Chrome
        if [ -d "/Applications/Google Chrome.app" ]; then
            BROWSER="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
        elif command -v google-chrome >/dev/null 2>&1; then
            BROWSER="google-chrome"
        elif command -v chromium >/dev/null 2>&1; then
            BROWSER="chromium"
        else
            print_warning "Chrome non trouv√©, ouverture manuelle requise"
            print_info "Ouvrez http://localhost:8000 dans Chrome"
            print_info "Appuyez sur F12 pour ouvrir les outils de d√©veloppement"
            return
        fi
        
        # Ouvrir Chrome avec les outils de d√©veloppement
        print_info "Ouverture de Chrome avec les outils de d√©veloppement..."
        $BROWSER --auto-open-devtools-for-tabs --disable-web-security --user-data-dir=/tmp/sirenepupitre-dev http://localhost:8000 &
        
        print_success "üéØ Application ouverte dans le navigateur"
        print_info "üìä Consultez la console du navigateur (F12) pour voir les logs"
        print_info "üõë Pour arr√™ter: kill $SERVER_PID"
        
        # Attendre que l'utilisateur appuie sur une touche
        print_info "Appuyez sur Entr√©e pour arr√™ter le serveur..."
        read -r
        
        # Arr√™ter le serveur
        print_info "Arr√™t du serveur..."
        kill $SERVER_PID 2>/dev/null || true
        print_success "Serveur arr√™t√©"
        
    else
        print_error "‚ùå Le serveur n'a pas d√©marr√© correctement"
        kill $SERVER_PID 2>/dev/null || true
        exit 1
    fi
}

# Fonction pour build + serveur + navigateur
build_and_serve_with_browser() {
    print_info "üî® Build + Serveur + Navigateur..."
    build_app
    print_info "‚è≥ Attente de 2 secondes..."
    sleep 2
    start_server_with_browser
}

# Traitement des arguments
case "${1:-both}" in
    "build")
        build_app
        ;;
    "serve")
        kill_servers
        start_server_with_browser
        ;;
    "both")
        kill_servers
        build_and_serve_with_browser
        ;;
    "kill")
        kill_servers
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_error "Option non reconnue: $1"
        show_help
        exit 1
        ;;
esac
